{
  "swagger": "2.0",
  "info": {
    "title": "Vega core APIs",
    "version": "v0.68.0"
  },
  "tags": [
    {
      "name": "CoreService"
    }
  ],
  "host": "lb.testnet.vega.xyz",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/blockchain/height": {
      "get": {
        "summary": "Blockchain height",
        "description": "Get the height of the last tendermint block",
        "operationId": "CoreService_LastBlockHeight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LastBlockHeightResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "CoreService"
        ]
      }
    },
    "/statistics": {
      "get": {
        "summary": "Statistics",
        "description": "Get statistics on Vega",
        "operationId": "CoreService_Statistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StatisticsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "CoreService"
        ]
      }
    },
    "/statistics/spam/{partyId}": {
      "get": {
        "summary": "Get Spam statistics",
        "description": "Retrieve the spam statistics for a given party",
        "operationId": "CoreService_GetSpamStatistics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSpamStatisticsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "partyId",
            "description": "Id for the party whose statistics are requested",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CoreService"
        ]
      }
    },
    "/stream/event/bus": {
      "get": {
        "summary": "Events subscription",
        "description": "Subscribe to a stream of events from the core",
        "operationId": "CoreService_ObserveEventBus",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1ObserveEventBusResponse"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of v1ObserveEventBusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "description": "One or more types of event, required field.\n\n - BUS_EVENT_TYPE_UNSPECIFIED: Default value, always invalid\n - BUS_EVENT_TYPE_ALL: Events of ALL event types, used when filtering stream from event bus\n - BUS_EVENT_TYPE_TIME_UPDATE: Event for blockchain time updates\n - BUS_EVENT_TYPE_LEDGER_MOVEMENTS: Event for when a transfer happens internally, contains the transfer information\n - BUS_EVENT_TYPE_POSITION_RESOLUTION: Event indicating position resolution has occurred\n - BUS_EVENT_TYPE_ORDER: Event for order updates, both new and existing orders\n - BUS_EVENT_TYPE_ACCOUNT: Event for account updates\n - BUS_EVENT_TYPE_PARTY: Event for party updates\n - BUS_EVENT_TYPE_TRADE: Event indicating a new trade has occurred\n - BUS_EVENT_TYPE_MARGIN_LEVELS: Event indicating margin levels have changed for a party\n - BUS_EVENT_TYPE_PROPOSAL: Event for proposal updates (for governance)\n - BUS_EVENT_TYPE_VOTE: Event indicating a new vote has occurred (for governance)\n - BUS_EVENT_TYPE_MARKET_DATA: Event for market data updates\n - BUS_EVENT_TYPE_NODE_SIGNATURE: Event for a new signature for a Vega node\n - BUS_EVENT_TYPE_LOSS_SOCIALIZATION: Event indicating loss socialisation occurred for a party\n - BUS_EVENT_TYPE_SETTLE_POSITION: Event for when a position is being settled\n - BUS_EVENT_TYPE_SETTLE_DISTRESSED: Event for when a position is distressed\n - BUS_EVENT_TYPE_MARKET_CREATED: Event indicating a new market was created\n - BUS_EVENT_TYPE_ASSET: Event for when an asset is added to Vega\n - BUS_EVENT_TYPE_MARKET_TICK: Event indicating a market tick event\n - BUS_EVENT_TYPE_WITHDRAWAL: Event for when a withdrawal occurs\n - BUS_EVENT_TYPE_DEPOSIT: Event for when a deposit occurs\n - BUS_EVENT_TYPE_AUCTION: Event indicating a change in auction state, for example starting or ending an auction\n - BUS_EVENT_TYPE_RISK_FACTOR: Event indicating a risk factor has been updated\n - BUS_EVENT_TYPE_NETWORK_PARAMETER: Event indicating a network parameter has been added or updated\n - BUS_EVENT_TYPE_LIQUIDITY_PROVISION: Event indicating a liquidity provision has been created or updated\n - BUS_EVENT_TYPE_MARKET_UPDATED: Event indicating a new market was created\n - BUS_EVENT_TYPE_ORACLE_SPEC: Event indicating an oracle spec has been created or updated\n - BUS_EVENT_TYPE_ORACLE_DATA: Event indicating that an oracle data has been broadcast\n - BUS_EVENT_TYPE_DELEGATION_BALANCE: Event indicating that an delegation balance of a party to a node for current epoch has changed\n - BUS_EVENT_TYPE_VALIDATOR_SCORE: Event indicating the validator score for the given epoch\n - BUS_EVENT_TYPE_EPOCH_UPDATE: Event indicating the start or end of an epoch\n - BUS_EVENT_TYPE_VALIDATOR_UPDATE: Event indicating that validator node has been updated\n - BUS_EVENT_TYPE_STAKE_LINKING: Event indicating a new staking event have been processed by the network\n - BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT: Event indicating the payout of a reward has been initiated\n - BUS_EVENT_TYPE_CHECKPOINT: Event indicating a new checkpoint was created\n - BUS_EVENT_TYPE_STREAM_START: Event indicating stream is starting\n - BUS_EVENT_TYPE_KEY_ROTATION: Event indicating key rotation took place\n - BUS_EVENT_TYPE_STATE_VAR: Event indicating state transitions in state variable consensus\n - BUS_EVENT_TYPE_NETWORK_LIMITS: Event indicating network limits set or updated\n - BUS_EVENT_TYPE_TRANSFER: Event indicating a update for a transfer\n - BUS_EVENT_TYPE_VALIDATOR_RANKING: Event indicating the ranking of validator and their status in Vega\n - BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_EVENT: Event indicating a new multi sig signer event have been processed\n - BUS_EVENT_TYPE_ERC20_MULTI_SIG_SET_THRESHOLD: Event indicating the erc20 multi sig threshold have been updated\n - BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_ADDED: Event indicating a new signer has been added to the ERC-20 multisig\n - BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_REMOVED: Event indicating a signer has been removed from the ERC-20 multisig\n - BUS_EVENT_TYPE_POSITION_STATE: Event indicating that a party's position has changed\n - BUS_EVENT_TYPE_ETHEREUM_KEY_ROTATION: Event indicating Ethereum key rotation took place\n - BUS_EVENT_TYPE_PROTOCOL_UPGRADE_PROPOSAL: Event indicating protocol upgrade proposal updates\n - BUS_EVENT_TYPE_BEGIN_BLOCK: The core is starting to process a new block\n - BUS_EVENT_TYPE_END_BLOCK: The core finished to process a block\n - BUS_EVENT_TYPE_PROTOCOL_UPGRADE_STARTED: The core is starting a protocol upgrade\n - BUS_EVENT_TYPE_SETTLE_MARKET: The market has stopped and settled\n - BUS_EVENT_TYPE_TRANSACTION_RESULT: The result of a transaction processed by the network\n - BUS_EVENT_TYPE_SNAPSHOT_TAKEN: Snapshot is taken at this block height\n - BUS_EVENT_TYPE_PROTOCOL_UPGRADE_DATA_NODE_READY: Data node notifies that it is ready to upgrade\n - BUS_EVENT_TYPE_DISTRESSED_ORDERS_CLOSED: Event indicating parties had orders closed because they were distressed, but were not closed out.\n - BUS_EVENT_TYPE_EXPIRED_ORDERS: Event indicating parties had orders closed because they were distressed, but were not closed out.\n - BUS_EVENT_TYPE_MARKET: Event indicating a market related event, for example when a market opens\n - BUS_EVENT_TYPE_TX_ERROR: Event used to report failed transactions back to a user, this is excluded from the ALL type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "BUS_EVENT_TYPE_UNSPECIFIED",
                "BUS_EVENT_TYPE_ALL",
                "BUS_EVENT_TYPE_TIME_UPDATE",
                "BUS_EVENT_TYPE_LEDGER_MOVEMENTS",
                "BUS_EVENT_TYPE_POSITION_RESOLUTION",
                "BUS_EVENT_TYPE_ORDER",
                "BUS_EVENT_TYPE_ACCOUNT",
                "BUS_EVENT_TYPE_PARTY",
                "BUS_EVENT_TYPE_TRADE",
                "BUS_EVENT_TYPE_MARGIN_LEVELS",
                "BUS_EVENT_TYPE_PROPOSAL",
                "BUS_EVENT_TYPE_VOTE",
                "BUS_EVENT_TYPE_MARKET_DATA",
                "BUS_EVENT_TYPE_NODE_SIGNATURE",
                "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
                "BUS_EVENT_TYPE_SETTLE_POSITION",
                "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
                "BUS_EVENT_TYPE_MARKET_CREATED",
                "BUS_EVENT_TYPE_ASSET",
                "BUS_EVENT_TYPE_MARKET_TICK",
                "BUS_EVENT_TYPE_WITHDRAWAL",
                "BUS_EVENT_TYPE_DEPOSIT",
                "BUS_EVENT_TYPE_AUCTION",
                "BUS_EVENT_TYPE_RISK_FACTOR",
                "BUS_EVENT_TYPE_NETWORK_PARAMETER",
                "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
                "BUS_EVENT_TYPE_MARKET_UPDATED",
                "BUS_EVENT_TYPE_ORACLE_SPEC",
                "BUS_EVENT_TYPE_ORACLE_DATA",
                "BUS_EVENT_TYPE_DELEGATION_BALANCE",
                "BUS_EVENT_TYPE_VALIDATOR_SCORE",
                "BUS_EVENT_TYPE_EPOCH_UPDATE",
                "BUS_EVENT_TYPE_VALIDATOR_UPDATE",
                "BUS_EVENT_TYPE_STAKE_LINKING",
                "BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT",
                "BUS_EVENT_TYPE_CHECKPOINT",
                "BUS_EVENT_TYPE_STREAM_START",
                "BUS_EVENT_TYPE_KEY_ROTATION",
                "BUS_EVENT_TYPE_STATE_VAR",
                "BUS_EVENT_TYPE_NETWORK_LIMITS",
                "BUS_EVENT_TYPE_TRANSFER",
                "BUS_EVENT_TYPE_VALIDATOR_RANKING",
                "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_EVENT",
                "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SET_THRESHOLD",
                "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_ADDED",
                "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_REMOVED",
                "BUS_EVENT_TYPE_POSITION_STATE",
                "BUS_EVENT_TYPE_ETHEREUM_KEY_ROTATION",
                "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_PROPOSAL",
                "BUS_EVENT_TYPE_BEGIN_BLOCK",
                "BUS_EVENT_TYPE_END_BLOCK",
                "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_STARTED",
                "BUS_EVENT_TYPE_SETTLE_MARKET",
                "BUS_EVENT_TYPE_TRANSACTION_RESULT",
                "BUS_EVENT_TYPE_SNAPSHOT_TAKEN",
                "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_DATA_NODE_READY",
                "BUS_EVENT_TYPE_DISTRESSED_ORDERS_CLOSED",
                "BUS_EVENT_TYPE_EXPIRED_ORDERS",
                "BUS_EVENT_TYPE_MARKET",
                "BUS_EVENT_TYPE_TX_ERROR"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "marketId",
            "description": "Market identifier, optional field.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "partyId",
            "description": "Party identifier, optional field.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "batchSize",
            "description": "Batch size, optional field -\nIf not specified, any events received will be sent immediately. If the client is not ready\nfor the next data-set, data may be dropped a number of times, and eventually the stream is closed.\nif specified, the first batch will be sent when ready. To receive the next set of events, the client\nmust write an `ObserveEventBatch` message on the stream to flush the buffer.\nIf no message is received in 5 seconds, the stream is closed.\nDefault: 0, send any and all events when they are available.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CoreService"
        ]
      }
    },
    "/time": {
      "get": {
        "summary": "Vega time",
        "description": "Get current Vega time",
        "operationId": "CoreService_GetVegaTime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVegaTimeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "CoreService"
        ]
      }
    },
    "/transaction": {
      "post": {
        "summary": "Submit transaction",
        "description": "Submit a signed transaction",
        "operationId": "CoreService_SubmitTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SubmitTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SubmitTransactionRequest"
            }
          }
        ],
        "tags": [
          "CoreService"
        ]
      }
    },
    "/transaction/check": {
      "post": {
        "summary": "Check transaction",
        "description": "Check a signed transaction",
        "operationId": "CoreService_CheckTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckTransactionRequest"
            }
          }
        ],
        "tags": [
          "CoreService"
        ]
      }
    },
    "/transaction/raw": {
      "post": {
        "summary": "Submit raw transaction",
        "description": "Submit a version agnostic signed transaction",
        "operationId": "CoreService_SubmitRawTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SubmitRawTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SubmitRawTransactionRequest"
            }
          }
        ],
        "tags": [
          "CoreService"
        ]
      }
    },
    "/transaction/raw/check": {
      "post": {
        "summary": "Check raw transaction",
        "description": "Check a raw signed transaction",
        "operationId": "CoreService_CheckRawTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckRawTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckRawTransactionRequest"
            }
          }
        ],
        "tags": [
          "CoreService"
        ]
      }
    }
  },
  "definitions": {
    "ConditionOperator": {
      "type": "string",
      "enum": [
        "OPERATOR_UNSPECIFIED",
        "OPERATOR_EQUALS",
        "OPERATOR_GREATER_THAN",
        "OPERATOR_GREATER_THAN_OR_EQUAL",
        "OPERATOR_LESS_THAN",
        "OPERATOR_LESS_THAN_OR_EQUAL"
      ],
      "default": "OPERATOR_UNSPECIFIED",
      "description": "Comparator describes the type of comparison.\n\n - OPERATOR_UNSPECIFIED: The default value\n - OPERATOR_EQUALS: Verify if the property values are strictly equal or not.\n - OPERATOR_GREATER_THAN: Verify if the data source data value is greater than the Condition value.\n - OPERATOR_GREATER_THAN_OR_EQUAL: Verify if the data source data value is greater than or equal to the Condition\nvalue.\n - OPERATOR_LESS_THAN: Verify if the data source data value is less than the Condition value.\n - OPERATOR_LESS_THAN_OR_EQUAL: Verify if the data source data value is less or equal to than the Condition\nvalue."
    },
    "MarketTradingMode": {
      "type": "string",
      "enum": [
        "TRADING_MODE_UNSPECIFIED",
        "TRADING_MODE_CONTINUOUS",
        "TRADING_MODE_BATCH_AUCTION",
        "TRADING_MODE_OPENING_AUCTION",
        "TRADING_MODE_MONITORING_AUCTION",
        "TRADING_MODE_NO_TRADING"
      ],
      "default": "TRADING_MODE_UNSPECIFIED",
      "description": "- TRADING_MODE_UNSPECIFIED: Default value, this is invalid\n - TRADING_MODE_CONTINUOUS: Normal trading\n - TRADING_MODE_BATCH_AUCTION: Auction trading (FBA)\n - TRADING_MODE_OPENING_AUCTION: Opening auction\n - TRADING_MODE_MONITORING_AUCTION: Auction triggered by monitoring\n - TRADING_MODE_NO_TRADING: No trading is allowed",
      "title": "The trading mode the market is currently running, also referred to as 'market state'"
    },
    "OracleDataSubmissionOracleSource": {
      "type": "string",
      "enum": [
        "ORACLE_SOURCE_UNSPECIFIED",
        "ORACLE_SOURCE_OPEN_ORACLE",
        "ORACLE_SOURCE_JSON"
      ],
      "default": "ORACLE_SOURCE_UNSPECIFIED",
      "description": "- ORACLE_SOURCE_UNSPECIFIED: The default value\n - ORACLE_SOURCE_OPEN_ORACLE: Specifies that the payload will be base64 encoded JSON conforming to the Open Oracle standard\n - ORACLE_SOURCE_JSON: Specifies that the payload will be base64 encoded JSON, but does not specify the shape of the data",
      "title": "The supported oracle sources"
    },
    "OrderTimeInForce": {
      "type": "string",
      "enum": [
        "TIME_IN_FORCE_UNSPECIFIED",
        "TIME_IN_FORCE_GTC",
        "TIME_IN_FORCE_GTT",
        "TIME_IN_FORCE_IOC",
        "TIME_IN_FORCE_FOK",
        "TIME_IN_FORCE_GFA",
        "TIME_IN_FORCE_GFN"
      ],
      "default": "TIME_IN_FORCE_UNSPECIFIED",
      "description": "- TIME_IN_FORCE_UNSPECIFIED: Default value for TimeInForce, can be valid for an amend\n - TIME_IN_FORCE_GTC: Good until cancelled, the order trades any amount and as much as possible\nand remains on the book until it either trades completely or is cancelled\n - TIME_IN_FORCE_GTT: Good until specified time, this order type trades any amount and as much as possible\nand remains on the book until it either trades completely, is cancelled, or expires at a set time\nNOTE: this may in future be multiple types or have sub types for orders that provide different ways of specifying expiry\n - TIME_IN_FORCE_IOC: Immediate or cancel, the order trades any amount and as much as possible\nbut does not remain on the book (whether it trades or not)\n - TIME_IN_FORCE_FOK: Fill or kill, The order either trades completely (remainingSize == 0 after adding)\nor not at all, does not remain on the book if it doesn't trade\n - TIME_IN_FORCE_GFA: Good for auction, this order is only accepted during an auction period\n - TIME_IN_FORCE_GFN: Good for normal, this order is only accepted during normal trading (that can be continuous trading or frequent batched auctions)",
      "title": "Time In Force for an order"
    },
    "TransactionResultFailureDetails": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "title": "An error message explaining the reason for the transaction failing processing"
        }
      }
    },
    "TransactionResultSuccessDetails": {
      "type": "object"
    },
    "UndelegateSubmissionMethod": {
      "type": "string",
      "enum": [
        "METHOD_UNSPECIFIED",
        "METHOD_NOW",
        "METHOD_AT_END_OF_EPOCH"
      ],
      "default": "METHOD_UNSPECIFIED"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "v1AnnounceNode": {
      "type": "object",
      "properties": {
        "vegaPubKey": {
          "type": "string",
          "title": "Vega public key, required field"
        },
        "ethereumAddress": {
          "type": "string",
          "title": "Ethereum public key, required field"
        },
        "chainPubKey": {
          "type": "string",
          "title": "Public key for the blockchain, required field"
        },
        "infoUrl": {
          "type": "string",
          "title": "URL with more info on the node"
        },
        "country": {
          "type": "string",
          "title": "Country code (ISO 3166-1 alpha-2) for the location of the node"
        },
        "id": {
          "type": "string",
          "title": "ID of the validator, (public master key)"
        },
        "name": {
          "type": "string",
          "title": "Name of the validator"
        },
        "avatarUrl": {
          "type": "string",
          "title": "AvatarURL of the validator"
        },
        "vegaPubKeyIndex": {
          "type": "integer",
          "format": "int64",
          "title": "Vega public key derivation index"
        },
        "fromEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The epoch from which the validator is expected\nto be ready to validate blocks"
        },
        "ethereumSignature": {
          "$ref": "#/definitions/v1Signature",
          "title": "Signature from the validator made using the ethereum wallet"
        },
        "vegaSignature": {
          "$ref": "#/definitions/v1Signature",
          "title": "Signature from the validator made using the Vega wallet"
        },
        "submitterAddress": {
          "type": "string",
          "title": "Ethereum public key to use as a submitter to allow automatic signature generation"
        }
      },
      "title": "Used to announce a node as a new pending validator"
    },
    "v1AuctionEvent": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "openingAuction": {
          "type": "boolean",
          "title": "True if the event indicates an auction opening and False otherwise"
        },
        "leave": {
          "type": "boolean",
          "title": "True if the event indicates leaving auction mode and False otherwise"
        },
        "start": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing the start time for an auction"
        },
        "end": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing the end time for an auction"
        },
        "trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "the reason this market is/was in auction"
        },
        "extensionTrigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "If an auction was ongoing, but was extended for whatever reason, this field will\nbe set to the trigger type indicating which component extended the auction"
        }
      },
      "title": "An auction event indicating a change in auction state, for example starting or ending an auction"
    },
    "v1BatchMarketInstructions": {
      "type": "object",
      "properties": {
        "cancellations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OrderCancellation"
          },
          "title": "A list of order cancellations to be processed sequentially"
        },
        "amendments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OrderAmendment"
          },
          "title": "A list of order amendments to be processed sequentially"
        },
        "submissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OrderSubmission"
          },
          "title": "A list of order submissions to be processed sequentially"
        }
      },
      "title": "A batch of order instructions.\nThis command accepts only the following batches of commands\nand will be processed in the following order:\n- OrderCancellation\n- OrderAmendment\n- OrderSubmission\nThe total amount of commands in the batch across all three lists of\ninstructions is restricted by the following network parameter:\n\"spam.protection.max.batchSize\""
    },
    "v1BeginBlock": {
      "type": "object",
      "properties": {
        "height": {
          "type": "string",
          "format": "uint64"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "hash": {
          "type": "string"
        }
      },
      "title": "BeginBlock"
    },
    "v1BusEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "A unique event identifier for the message"
        },
        "block": {
          "type": "string",
          "title": "The batch (or block) of transactions that the events relate to"
        },
        "type": {
          "$ref": "#/definitions/v1BusEventType",
          "title": "The type of bus event (one of the list below)"
        },
        "timeUpdate": {
          "$ref": "#/definitions/v1TimeUpdate",
          "title": "Time update events"
        },
        "ledgerMovements": {
          "$ref": "#/definitions/v1LedgerMovements",
          "title": "Transfer responses update events"
        },
        "positionResolution": {
          "$ref": "#/definitions/v1PositionResolution",
          "title": "Position resolution events"
        },
        "order": {
          "$ref": "#/definitions/vegaOrder",
          "title": "Order events"
        },
        "account": {
          "$ref": "#/definitions/vegaAccount",
          "title": "Account events"
        },
        "party": {
          "$ref": "#/definitions/vegaParty",
          "title": "Party events"
        },
        "trade": {
          "$ref": "#/definitions/vegaTrade",
          "title": "Trade events"
        },
        "marginLevels": {
          "$ref": "#/definitions/vegaMarginLevels",
          "title": "Margin level update events"
        },
        "proposal": {
          "$ref": "#/definitions/vegaProposal",
          "title": "Proposal events (for governance)"
        },
        "vote": {
          "$ref": "#/definitions/vegaVote",
          "title": "Vote events (for governance)"
        },
        "marketData": {
          "$ref": "#/definitions/vegaMarketData",
          "title": "Market data events"
        },
        "nodeSignature": {
          "$ref": "#/definitions/v1NodeSignature",
          "title": "Node signature events"
        },
        "lossSocialization": {
          "$ref": "#/definitions/v1LossSocialization",
          "title": "Loss socialization events"
        },
        "settlePosition": {
          "$ref": "#/definitions/v1SettlePosition",
          "title": "Position settlement events"
        },
        "settleDistressed": {
          "$ref": "#/definitions/v1SettleDistressed",
          "title": "Position distressed events"
        },
        "marketCreated": {
          "$ref": "#/definitions/vegaMarket",
          "title": "Market created events"
        },
        "asset": {
          "$ref": "#/definitions/vegaAsset",
          "title": "Asset events"
        },
        "marketTick": {
          "$ref": "#/definitions/v1MarketTick",
          "title": "Market tick events"
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaWithdrawal",
          "title": "Withdrawal events"
        },
        "deposit": {
          "$ref": "#/definitions/vegaDeposit",
          "title": "Deposit events"
        },
        "auction": {
          "$ref": "#/definitions/v1AuctionEvent",
          "title": "Auction events"
        },
        "riskFactor": {
          "$ref": "#/definitions/vegaRiskFactor",
          "title": "Risk factor events"
        },
        "networkParameter": {
          "$ref": "#/definitions/vegaNetworkParameter",
          "title": "Network parameter events"
        },
        "liquidityProvision": {
          "$ref": "#/definitions/vegaLiquidityProvision",
          "title": "LiquidityProvision  events"
        },
        "marketUpdated": {
          "$ref": "#/definitions/vegaMarket",
          "title": "Market created events"
        },
        "oracleSpec": {
          "$ref": "#/definitions/vegaOracleSpec",
          "title": "OracleSpec events"
        },
        "oracleData": {
          "$ref": "#/definitions/vegaOracleData",
          "title": "OracleData events"
        },
        "delegationBalance": {
          "$ref": "#/definitions/v1DelegationBalanceEvent",
          "title": "Delegation balance events"
        },
        "validatorScore": {
          "$ref": "#/definitions/v1ValidatorScoreEvent",
          "title": "Validator score calculated"
        },
        "epochEvent": {
          "$ref": "#/definitions/v1EpochEvent",
          "title": "Epoch update events - See [Epoch](#vega.Epoch)"
        },
        "validatorUpdate": {
          "$ref": "#/definitions/v1ValidatorUpdate",
          "title": "Validator update events"
        },
        "stakeLinking": {
          "$ref": "#/definitions/v1StakeLinking",
          "title": "Staking event"
        },
        "rewardPayout": {
          "$ref": "#/definitions/v1RewardPayoutEvent",
          "title": "Reward payout event"
        },
        "checkpoint": {
          "$ref": "#/definitions/v1CheckpointEvent",
          "title": "Checkpoint was created"
        },
        "keyRotation": {
          "$ref": "#/definitions/v1KeyRotation",
          "title": "Key rotation took place"
        },
        "stateVar": {
          "$ref": "#/definitions/v1StateVar",
          "title": "State variable consensus state transition update"
        },
        "networkLimits": {
          "$ref": "#/definitions/vegaNetworkLimits",
          "title": "Network limits events"
        },
        "transfer": {
          "$ref": "#/definitions/vegaeventsv1Transfer",
          "title": "Transfer event"
        },
        "rankingEvent": {
          "$ref": "#/definitions/v1ValidatorRankingEvent",
          "title": "Ranking event"
        },
        "erc20MultisigSignerEvent": {
          "$ref": "#/definitions/v1ERC20MultiSigSignerEvent",
          "title": "ERC20 multi sig signer event"
        },
        "erc20MultisigSetThresholdEvent": {
          "$ref": "#/definitions/v1ERC20MultiSigThresholdSetEvent",
          "title": "ERC20 multi sig set threshold event"
        },
        "erc20MultisigSignerAdded": {
          "$ref": "#/definitions/v1ERC20MultiSigSignerAdded",
          "title": "ERC20 multi sig signer added"
        },
        "erc20MultisigSignerRemoved": {
          "$ref": "#/definitions/v1ERC20MultiSigSignerRemoved",
          "title": "ERC20 multi sig signer removed"
        },
        "positionStateEvent": {
          "$ref": "#/definitions/v1PositionStateEvent",
          "title": "Position status for a party in a market"
        },
        "ethereumKeyRotation": {
          "$ref": "#/definitions/v1EthereumKeyRotation",
          "title": "Ethereum key rotation took place"
        },
        "protocolUpgradeEvent": {
          "$ref": "#/definitions/v1ProtocolUpgradeEvent",
          "title": "Protocol upgrade proposal updates"
        },
        "beginBlock": {
          "$ref": "#/definitions/v1BeginBlock",
          "title": "The core is starting to process a new block"
        },
        "endBlock": {
          "$ref": "#/definitions/v1EndBlock",
          "title": "The core finished to process a block"
        },
        "protocolUpgradeStarted": {
          "$ref": "#/definitions/v1ProtocolUpgradeStarted",
          "title": "The core is starting a protocol upgrade"
        },
        "settleMarket": {
          "$ref": "#/definitions/v1SettleMarket",
          "title": "Settle market event for data-node to update positions for settled markets"
        },
        "transactionResult": {
          "$ref": "#/definitions/v1TransactionResult",
          "title": "The result of a transaction processed by the network"
        },
        "coreSnapshotEvent": {
          "$ref": "#/definitions/v1CoreSnapshotData",
          "title": "A core snapshot has been taken at the end of the block"
        },
        "protocolUpgradeDataNodeReady": {
          "$ref": "#/definitions/v1ProtocolUpgradeDataNodeReady",
          "title": "A core snapshot has been taken at the end of the block"
        },
        "distressedOrders": {
          "$ref": "#/definitions/v1DistressedOrders",
          "title": "Parties that had their orders closed because they were distressed"
        },
        "expiredOrders": {
          "$ref": "#/definitions/v1ExpiredOrders",
          "title": "Orders that expired for a given market"
        },
        "market": {
          "$ref": "#/definitions/v1MarketEvent",
          "title": "Market tick events - See [MarketEvent](#vega.MarketEvent)"
        },
        "txErrEvent": {
          "$ref": "#/definitions/v1TxErrorEvent",
          "title": "Transaction error events, not included in the ALL event type"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "title": "Version of bus event"
        },
        "chainId": {
          "type": "string"
        },
        "txHash": {
          "type": "string"
        }
      },
      "title": "A bus event is a container for event bus events emitted by Vega"
    },
    "v1BusEventType": {
      "type": "string",
      "enum": [
        "BUS_EVENT_TYPE_UNSPECIFIED",
        "BUS_EVENT_TYPE_ALL",
        "BUS_EVENT_TYPE_TIME_UPDATE",
        "BUS_EVENT_TYPE_LEDGER_MOVEMENTS",
        "BUS_EVENT_TYPE_POSITION_RESOLUTION",
        "BUS_EVENT_TYPE_ORDER",
        "BUS_EVENT_TYPE_ACCOUNT",
        "BUS_EVENT_TYPE_PARTY",
        "BUS_EVENT_TYPE_TRADE",
        "BUS_EVENT_TYPE_MARGIN_LEVELS",
        "BUS_EVENT_TYPE_PROPOSAL",
        "BUS_EVENT_TYPE_VOTE",
        "BUS_EVENT_TYPE_MARKET_DATA",
        "BUS_EVENT_TYPE_NODE_SIGNATURE",
        "BUS_EVENT_TYPE_LOSS_SOCIALIZATION",
        "BUS_EVENT_TYPE_SETTLE_POSITION",
        "BUS_EVENT_TYPE_SETTLE_DISTRESSED",
        "BUS_EVENT_TYPE_MARKET_CREATED",
        "BUS_EVENT_TYPE_ASSET",
        "BUS_EVENT_TYPE_MARKET_TICK",
        "BUS_EVENT_TYPE_WITHDRAWAL",
        "BUS_EVENT_TYPE_DEPOSIT",
        "BUS_EVENT_TYPE_AUCTION",
        "BUS_EVENT_TYPE_RISK_FACTOR",
        "BUS_EVENT_TYPE_NETWORK_PARAMETER",
        "BUS_EVENT_TYPE_LIQUIDITY_PROVISION",
        "BUS_EVENT_TYPE_MARKET_UPDATED",
        "BUS_EVENT_TYPE_ORACLE_SPEC",
        "BUS_EVENT_TYPE_ORACLE_DATA",
        "BUS_EVENT_TYPE_DELEGATION_BALANCE",
        "BUS_EVENT_TYPE_VALIDATOR_SCORE",
        "BUS_EVENT_TYPE_EPOCH_UPDATE",
        "BUS_EVENT_TYPE_VALIDATOR_UPDATE",
        "BUS_EVENT_TYPE_STAKE_LINKING",
        "BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT",
        "BUS_EVENT_TYPE_CHECKPOINT",
        "BUS_EVENT_TYPE_STREAM_START",
        "BUS_EVENT_TYPE_KEY_ROTATION",
        "BUS_EVENT_TYPE_STATE_VAR",
        "BUS_EVENT_TYPE_NETWORK_LIMITS",
        "BUS_EVENT_TYPE_TRANSFER",
        "BUS_EVENT_TYPE_VALIDATOR_RANKING",
        "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_EVENT",
        "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SET_THRESHOLD",
        "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_ADDED",
        "BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_REMOVED",
        "BUS_EVENT_TYPE_POSITION_STATE",
        "BUS_EVENT_TYPE_ETHEREUM_KEY_ROTATION",
        "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_PROPOSAL",
        "BUS_EVENT_TYPE_BEGIN_BLOCK",
        "BUS_EVENT_TYPE_END_BLOCK",
        "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_STARTED",
        "BUS_EVENT_TYPE_SETTLE_MARKET",
        "BUS_EVENT_TYPE_TRANSACTION_RESULT",
        "BUS_EVENT_TYPE_SNAPSHOT_TAKEN",
        "BUS_EVENT_TYPE_PROTOCOL_UPGRADE_DATA_NODE_READY",
        "BUS_EVENT_TYPE_DISTRESSED_ORDERS_CLOSED",
        "BUS_EVENT_TYPE_EXPIRED_ORDERS",
        "BUS_EVENT_TYPE_MARKET",
        "BUS_EVENT_TYPE_TX_ERROR"
      ],
      "default": "BUS_EVENT_TYPE_UNSPECIFIED",
      "description": "- BUS_EVENT_TYPE_UNSPECIFIED: Default value, always invalid\n - BUS_EVENT_TYPE_ALL: Events of ALL event types, used when filtering stream from event bus\n - BUS_EVENT_TYPE_TIME_UPDATE: Event for blockchain time updates\n - BUS_EVENT_TYPE_LEDGER_MOVEMENTS: Event for when a transfer happens internally, contains the transfer information\n - BUS_EVENT_TYPE_POSITION_RESOLUTION: Event indicating position resolution has occurred\n - BUS_EVENT_TYPE_ORDER: Event for order updates, both new and existing orders\n - BUS_EVENT_TYPE_ACCOUNT: Event for account updates\n - BUS_EVENT_TYPE_PARTY: Event for party updates\n - BUS_EVENT_TYPE_TRADE: Event indicating a new trade has occurred\n - BUS_EVENT_TYPE_MARGIN_LEVELS: Event indicating margin levels have changed for a party\n - BUS_EVENT_TYPE_PROPOSAL: Event for proposal updates (for governance)\n - BUS_EVENT_TYPE_VOTE: Event indicating a new vote has occurred (for governance)\n - BUS_EVENT_TYPE_MARKET_DATA: Event for market data updates\n - BUS_EVENT_TYPE_NODE_SIGNATURE: Event for a new signature for a Vega node\n - BUS_EVENT_TYPE_LOSS_SOCIALIZATION: Event indicating loss socialisation occurred for a party\n - BUS_EVENT_TYPE_SETTLE_POSITION: Event for when a position is being settled\n - BUS_EVENT_TYPE_SETTLE_DISTRESSED: Event for when a position is distressed\n - BUS_EVENT_TYPE_MARKET_CREATED: Event indicating a new market was created\n - BUS_EVENT_TYPE_ASSET: Event for when an asset is added to Vega\n - BUS_EVENT_TYPE_MARKET_TICK: Event indicating a market tick event\n - BUS_EVENT_TYPE_WITHDRAWAL: Event for when a withdrawal occurs\n - BUS_EVENT_TYPE_DEPOSIT: Event for when a deposit occurs\n - BUS_EVENT_TYPE_AUCTION: Event indicating a change in auction state, for example starting or ending an auction\n - BUS_EVENT_TYPE_RISK_FACTOR: Event indicating a risk factor has been updated\n - BUS_EVENT_TYPE_NETWORK_PARAMETER: Event indicating a network parameter has been added or updated\n - BUS_EVENT_TYPE_LIQUIDITY_PROVISION: Event indicating a liquidity provision has been created or updated\n - BUS_EVENT_TYPE_MARKET_UPDATED: Event indicating a new market was created\n - BUS_EVENT_TYPE_ORACLE_SPEC: Event indicating an oracle spec has been created or updated\n - BUS_EVENT_TYPE_ORACLE_DATA: Event indicating that an oracle data has been broadcast\n - BUS_EVENT_TYPE_DELEGATION_BALANCE: Event indicating that an delegation balance of a party to a node for current epoch has changed\n - BUS_EVENT_TYPE_VALIDATOR_SCORE: Event indicating the validator score for the given epoch\n - BUS_EVENT_TYPE_EPOCH_UPDATE: Event indicating the start or end of an epoch\n - BUS_EVENT_TYPE_VALIDATOR_UPDATE: Event indicating that validator node has been updated\n - BUS_EVENT_TYPE_STAKE_LINKING: Event indicating a new staking event have been processed by the network\n - BUS_EVENT_TYPE_REWARD_PAYOUT_EVENT: Event indicating the payout of a reward has been initiated\n - BUS_EVENT_TYPE_CHECKPOINT: Event indicating a new checkpoint was created\n - BUS_EVENT_TYPE_STREAM_START: Event indicating stream is starting\n - BUS_EVENT_TYPE_KEY_ROTATION: Event indicating key rotation took place\n - BUS_EVENT_TYPE_STATE_VAR: Event indicating state transitions in state variable consensus\n - BUS_EVENT_TYPE_NETWORK_LIMITS: Event indicating network limits set or updated\n - BUS_EVENT_TYPE_TRANSFER: Event indicating a update for a transfer\n - BUS_EVENT_TYPE_VALIDATOR_RANKING: Event indicating the ranking of validator and their status in Vega\n - BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_EVENT: Event indicating a new multi sig signer event have been processed\n - BUS_EVENT_TYPE_ERC20_MULTI_SIG_SET_THRESHOLD: Event indicating the erc20 multi sig threshold have been updated\n - BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_ADDED: Event indicating a new signer has been added to the ERC-20 multisig\n - BUS_EVENT_TYPE_ERC20_MULTI_SIG_SIGNER_REMOVED: Event indicating a signer has been removed from the ERC-20 multisig\n - BUS_EVENT_TYPE_POSITION_STATE: Event indicating that a party's position has changed\n - BUS_EVENT_TYPE_ETHEREUM_KEY_ROTATION: Event indicating Ethereum key rotation took place\n - BUS_EVENT_TYPE_PROTOCOL_UPGRADE_PROPOSAL: Event indicating protocol upgrade proposal updates\n - BUS_EVENT_TYPE_BEGIN_BLOCK: The core is starting to process a new block\n - BUS_EVENT_TYPE_END_BLOCK: The core finished to process a block\n - BUS_EVENT_TYPE_PROTOCOL_UPGRADE_STARTED: The core is starting a protocol upgrade\n - BUS_EVENT_TYPE_SETTLE_MARKET: The market has stopped and settled\n - BUS_EVENT_TYPE_TRANSACTION_RESULT: The result of a transaction processed by the network\n - BUS_EVENT_TYPE_SNAPSHOT_TAKEN: Snapshot is taken at this block height\n - BUS_EVENT_TYPE_PROTOCOL_UPGRADE_DATA_NODE_READY: Data node notifies that it is ready to upgrade\n - BUS_EVENT_TYPE_DISTRESSED_ORDERS_CLOSED: Event indicating parties had orders closed because they were distressed, but were not closed out.\n - BUS_EVENT_TYPE_EXPIRED_ORDERS: Event indicating parties had orders closed because they were distressed, but were not closed out.\n - BUS_EVENT_TYPE_MARKET: Event indicating a market related event, for example when a market opens\n - BUS_EVENT_TYPE_TX_ERROR: Event used to report failed transactions back to a user, this is excluded from the ALL type",
      "title": "An (event) bus event type is used to specify a type of event\nIt has 2 styles of event:\nSingle values (e.g. BUS_EVENT_TYPE_ORDER) where they represent one data item\nGroup values (e.g. BUS_EVENT_TYPE_AUCTION) where they represent a group of data items"
    },
    "v1CancelTransfer": {
      "type": "object",
      "properties": {
        "transferId": {
          "type": "string",
          "title": "The ID of the transfer to cancel"
        }
      },
      "title": "A request for cancelling a recurring transfer"
    },
    "v1CheckRawTransactionRequest": {
      "type": "object",
      "properties": {
        "tx": {
          "type": "string",
          "format": "byte",
          "title": "A bundle of signed payload and signature marshalled into a byte array, to form a transaction that would be submitted to the Vega blockchain"
        }
      },
      "title": "Request for checking a version agnostic transaction on Vega"
    },
    "v1CheckRawTransactionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Success will be true if the transaction was checked by the node"
        },
        "code": {
          "type": "integer",
          "format": "int64",
          "title": "Check code result"
        },
        "gasWanted": {
          "type": "string",
          "format": "int64",
          "title": "Gas wanted for transaction"
        },
        "gasUsed": {
          "type": "string",
          "format": "int64",
          "title": "Gas used for transaction"
        },
        "data": {
          "type": "string",
          "title": "Data for details"
        },
        "log": {
          "type": "string",
          "title": "Transaction log"
        },
        "info": {
          "type": "string",
          "title": "Informations about the transaction"
        }
      },
      "title": "Response for checking a version agnostic transaction on Vega"
    },
    "v1CheckTransactionRequest": {
      "type": "object",
      "properties": {
        "tx": {
          "$ref": "#/definitions/v1Transaction",
          "title": "A bundle of signed payload and signature, to form a transaction that would be submitted to the Vega blockchain"
        }
      },
      "title": "Request for checking a transaction v2 on Vega"
    },
    "v1CheckTransactionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Success will be true if the transaction was checked by the node"
        },
        "code": {
          "type": "integer",
          "format": "int64",
          "title": "Check code result"
        },
        "gasWanted": {
          "type": "string",
          "format": "int64",
          "title": "Gas wanted for transaction"
        },
        "gasUsed": {
          "type": "string",
          "format": "int64",
          "title": "Gas used for transaction"
        },
        "data": {
          "type": "string",
          "title": "Data for details"
        },
        "log": {
          "type": "string",
          "title": "Transaction log"
        },
        "info": {
          "type": "string",
          "title": "Informations about the transaction"
        }
      }
    },
    "v1CheckpointEvent": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string"
        },
        "blockHash": {
          "type": "string"
        },
        "blockHeight": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1Condition": {
      "type": "object",
      "properties": {
        "operator": {
          "$ref": "#/definitions/ConditionOperator",
          "description": "comparator is the type of comparison to make on the value."
        },
        "value": {
          "type": "string",
          "description": "value is used by the comparator."
        }
      },
      "title": "Condition describes the condition that must be validated by the network"
    },
    "v1CoreSnapshotData": {
      "type": "object",
      "properties": {
        "blockHeight": {
          "type": "string",
          "format": "uint64",
          "title": "The block height at which snapshot was taken"
        },
        "blockHash": {
          "type": "string",
          "title": "The hash of the snapshot block"
        },
        "coreVersion": {
          "type": "string",
          "title": "Core version"
        },
        "protocolUpgradeBlock": {
          "type": "boolean",
          "title": "Indicates if the snapshot is taken as part of protocol upgrade"
        }
      },
      "description": "CoreSnapshotData represents the core snapshot data."
    },
    "v1Data": {
      "type": "object",
      "properties": {
        "signers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Signer"
          }
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Property"
          },
          "title": "data holds all the properties of the data"
        },
        "matchedSpecIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "matched_specs_ids lists all the specs that matched this data.\nWhen the array is empty, it means no spec matched this data."
        },
        "broadcastAt": {
          "type": "string",
          "format": "int64",
          "description": "broadcast_at is the time at which the data was broadcast to the markets\nwith a matching spec.\nIt has no value when the date did not match any spec.\nThe value is a Unix timestamp in nanoseconds."
        }
      },
      "description": "Data describes valid source data that has been received by the node.\nIt represents both matched and unmatched data."
    },
    "v1DelegateSubmission": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "title": "The ID for the node to delegate to"
        },
        "amount": {
          "type": "string",
          "description": "The amount of stake to delegate\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places for the token."
        }
      },
      "title": "A command to submit an instruction to delegate some stake to a node"
    },
    "v1DelegationBalanceEvent": {
      "type": "object",
      "properties": {
        "party": {
          "type": "string"
        },
        "nodeId": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "epochSeq": {
          "type": "string"
        }
      },
      "title": "DelegationBalanceEvent - updates on the delegation balance of a party to a node in the current epoch in effect"
    },
    "v1DistressedOrders": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "parties": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Slice of Party identifiers (public keys) for the event"
        }
      },
      "title": "A distressed order contains the party IDs for all parties that were distressed and had their orders closed,\nbut did not need to be closed out after cancelling their orders"
    },
    "v1ERC20MultiSigSignerAdded": {
      "type": "object",
      "properties": {
        "signatureId": {
          "type": "string",
          "title": "The identifier of the signature bundle"
        },
        "validatorId": {
          "type": "string",
          "title": "The vega node ID of the node to be added"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "the time at which this happened"
        },
        "newSigner": {
          "type": "string",
          "title": "The ethereum address of the new signer"
        },
        "submitter": {
          "type": "string",
          "title": "The address of the submitter of the transaction"
        },
        "nonce": {
          "type": "string",
          "description": "The nonce used."
        },
        "epochSeq": {
          "type": "string",
          "title": "The epoch that the node was added for"
        }
      }
    },
    "v1ERC20MultiSigSignerEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1ERC20MultiSigSignerEventType"
        },
        "signer": {
          "type": "string"
        },
        "nonce": {
          "type": "string"
        },
        "blockTime": {
          "type": "string",
          "format": "int64"
        },
        "txHash": {
          "type": "string"
        },
        "logIndex": {
          "type": "string",
          "format": "uint64"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1ERC20MultiSigSignerEventType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_ADDED",
        "TYPE_REMOVED"
      ],
      "default": "TYPE_UNSPECIFIED"
    },
    "v1ERC20MultiSigSignerRemoved": {
      "type": "object",
      "properties": {
        "signatureSubmitters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ERC20MultiSigSignerRemovedSubmitter"
          },
          "title": "A list containing all the IDs of bundle generated\nThere should be one bundle generated for every validators\nin the validator set"
        },
        "validatorId": {
          "type": "string",
          "title": "The vega node ID of the node which is to be removed"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "the time at which this happened"
        },
        "oldSigner": {
          "type": "string",
          "title": "The ethereum address of the signer to be removed"
        },
        "nonce": {
          "type": "string",
          "description": "The nonce used."
        },
        "epochSeq": {
          "type": "string",
          "title": "The epoch that the node was removed for"
        }
      }
    },
    "v1ERC20MultiSigSignerRemovedSubmitter": {
      "type": "object",
      "properties": {
        "signatureId": {
          "type": "string",
          "title": "The ID of this signature bundle"
        },
        "submitter": {
          "type": "string",
          "title": "The address of the submitter of the transaction"
        }
      }
    },
    "v1ERC20MultiSigThresholdSetEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "newThreshold": {
          "type": "integer",
          "format": "int64"
        },
        "nonce": {
          "type": "string"
        },
        "blockTime": {
          "type": "string",
          "format": "int64"
        },
        "txHash": {
          "type": "string"
        },
        "logIndex": {
          "type": "string",
          "format": "uint64"
        },
        "blockNumber": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1ETHAddress": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        }
      }
    },
    "v1EndBlock": {
      "type": "object",
      "properties": {
        "height": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "EndBlock"
    },
    "v1EpochEvent": {
      "type": "object",
      "properties": {
        "seq": {
          "type": "string",
          "format": "uint64",
          "title": "Sequence number that increases by one each epoch"
        },
        "action": {
          "$ref": "#/definitions/vegaEpochAction",
          "title": "Action tells us what action is taking place"
        },
        "startTime": {
          "type": "string",
          "format": "int64",
          "title": "What time did this epoch start"
        },
        "expireTime": {
          "type": "string",
          "format": "int64",
          "title": "What time should this epoch end"
        },
        "endTime": {
          "type": "string",
          "format": "int64",
          "title": "What time did it actually end"
        }
      },
      "title": "Epoch details"
    },
    "v1EthereumKeyRotateSubmission": {
      "type": "object",
      "properties": {
        "targetBlock": {
          "type": "string",
          "format": "uint64",
          "title": "Target block at which the key rotation will take effect on"
        },
        "newAddress": {
          "type": "string",
          "title": "The new address to rotate to"
        },
        "currentAddress": {
          "type": "string",
          "title": "Currently used public address"
        },
        "submitterAddress": {
          "type": "string",
          "title": "Ethereum public key to use as a submitter to allow automatic signature generation"
        },
        "ethereumSignature": {
          "$ref": "#/definitions/v1Signature",
          "title": "Signature that can be verified using the new ethereum address"
        }
      },
      "title": "A transaction to allow a validator to rotate their ethereum keys"
    },
    "v1EthereumKeyRotation": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "title": "Node id of the node"
        },
        "oldAddress": {
          "type": "string",
          "title": "Old Ethereum address of validator node"
        },
        "newAddress": {
          "type": "string",
          "title": "New Ethereum address of validator node"
        },
        "blockHeight": {
          "type": "string",
          "format": "uint64",
          "title": "Height of the block where key rotation took effect"
        }
      },
      "title": "An Ethereum key rotation events contains information about Ethereum key rotation"
    },
    "v1ExpiredOrders": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "orderIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Slice of expired order identifiers"
        }
      }
    },
    "v1ExternalData": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1Data"
        }
      }
    },
    "v1Filter": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/v1PropertyKey",
          "description": "key is the data source data property key targeted by the filter."
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Condition"
          },
          "description": "conditions are the conditions that should be matched by the data to be\nconsidered of interest."
        }
      },
      "description": "Filter describes the conditions under which a data source data is considered of\ninterest or not."
    },
    "v1GetSpamStatisticsResponse": {
      "type": "object",
      "properties": {
        "chainId": {
          "type": "string"
        },
        "statistics": {
          "$ref": "#/definitions/v1SpamStatistics"
        }
      },
      "title": "A response containing all the spam statistics of a party for the current epoch"
    },
    "v1GetVegaTimeResponse": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp representation of current VegaTime as represented in\nNanoseconds since the epoch, for example `1580473859111222333` corresponds to `2020-01-31T12:30:59.111222333Z`"
        }
      },
      "title": "Response for the current consensus coordinated time on the Vega network, referred to as \"VegaTime\""
    },
    "v1IssueSignatures": {
      "type": "object",
      "properties": {
        "submitter": {
          "type": "string",
          "title": "The ethereum address which will submit the signatures to the smart contract"
        },
        "kind": {
          "$ref": "#/definitions/v1NodeSignatureKind",
          "title": "The kind of signatures to generate, namely for whether a signer is being added or removed"
        },
        "validatorNodeId": {
          "type": "string",
          "title": "The ID of the node that will be signed in or out of the smart contract"
        }
      },
      "title": "A transaction for a validator to submit signatures to a smart contract"
    },
    "v1KeyRotateSubmission": {
      "type": "object",
      "properties": {
        "newPubKeyIndex": {
          "type": "integer",
          "format": "int64",
          "title": "New Vega public key derivation index"
        },
        "targetBlock": {
          "type": "string",
          "format": "uint64",
          "title": "Target block at which the key rotation will take effect on"
        },
        "newPubKey": {
          "type": "string",
          "title": "The new public key to rotate to"
        },
        "currentPubKeyHash": {
          "type": "string",
          "title": "Hash of currently used public key"
        }
      },
      "title": "A transaction to allow a validator to rotate their Vega keys"
    },
    "v1KeyRotation": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "title": "Node id of the node"
        },
        "oldPubKey": {
          "type": "string",
          "title": "Old Vega public key of validator node"
        },
        "newPubKey": {
          "type": "string",
          "title": "New Vega public key of validator node"
        },
        "blockHeight": {
          "type": "string",
          "format": "uint64",
          "title": "Height of the block where key rotation took effect"
        }
      },
      "title": "A key rotation events contains information about Vega key rotation"
    },
    "v1LastBlockHeightResponse": {
      "type": "object",
      "properties": {
        "height": {
          "type": "string",
          "format": "uint64",
          "title": "last block height"
        },
        "hash": {
          "type": "string",
          "title": "last block hash"
        },
        "spamPowHashFunction": {
          "type": "string",
          "title": "supported proof of work hash function"
        },
        "spamPowDifficulty": {
          "type": "integer",
          "format": "int64",
          "title": "the difficulty of the proof of work (target number of zeros)"
        },
        "spamPowNumberOfPastBlocks": {
          "type": "integer",
          "format": "int64",
          "title": "supported proof of work number of blocks behind current height allowed"
        },
        "spamPowNumberOfTxPerBlock": {
          "type": "integer",
          "format": "int64",
          "title": "allowed number of transactions per block"
        },
        "spamPowIncreasingDifficulty": {
          "type": "boolean",
          "title": "is increasing difficulty allowed for using the same height for more than `spam_pow_number_of_past_blocks` transactions"
        },
        "chainId": {
          "type": "string",
          "title": "the network chain id from which the block comes from"
        }
      },
      "title": "A response with the height of the last block processed by\ntendermint"
    },
    "v1LedgerMovements": {
      "type": "object",
      "properties": {
        "ledgerMovements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLedgerMovement"
          },
          "title": "One or more entries containing internal transfer information"
        }
      },
      "title": "A transfer responses event contains a collection of transfer information"
    },
    "v1LiquidityProvisionAmendment": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string"
        },
        "commitmentAmount": {
          "type": "string",
          "title": "From here at least one of the following is required to consider the command valid"
        },
        "fee": {
          "type": "string"
        },
        "sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          }
        },
        "buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          }
        },
        "reference": {
          "type": "string"
        }
      },
      "title": "Amend a liquidity provision request"
    },
    "v1LiquidityProvisionCancellation": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string"
        }
      },
      "title": "Cancel a liquidity provision request"
    },
    "v1LiquidityProvisionSubmission": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        },
        "commitmentAmount": {
          "type": "string",
          "description": "Specified as a unitless number that represents the amount of settlement asset of the market\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places."
        },
        "fee": {
          "type": "string",
          "title": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per setting fees and rewarding liquidity providers"
        },
        "sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity sell orders to meet the liquidity provision obligation"
        },
        "buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity buy orders to meet the liquidity provision obligation"
        },
        "reference": {
          "type": "string",
          "title": "A reference to be added to every order created out of this liquidityProvisionSubmission"
        }
      },
      "title": "A liquidity provision submitted for a given market"
    },
    "v1LossSocialization": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "partyId": {
          "type": "string",
          "title": "Party identifier (public key) for the event"
        },
        "amount": {
          "type": "string",
          "title": "Amount distributed"
        }
      },
      "title": "A loss socialization event contains details on the amount of wins unable to be distributed"
    },
    "v1MarketEvent": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "payload": {
          "type": "string",
          "title": "Payload is a unique information string"
        }
      },
      "title": "MarketEvent - the common denominator for all market events\ninterface has a method to return a string for logging"
    },
    "v1MarketTick": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "time": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing latest update from Vega blockchain aka Vega-time"
        }
      },
      "title": "A market ticket event contains the time value for when a particular market was last processed on Vega"
    },
    "v1NodeSignature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The identifier of the resource being signed"
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "title": "The signature"
        },
        "kind": {
          "$ref": "#/definitions/v1NodeSignatureKind",
          "title": "The kind of resource being signed"
        }
      },
      "title": "Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network"
    },
    "v1NodeSignatureKind": {
      "type": "string",
      "enum": [
        "NODE_SIGNATURE_KIND_UNSPECIFIED",
        "NODE_SIGNATURE_KIND_ASSET_NEW",
        "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL",
        "NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_ADDED",
        "NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_REMOVED",
        "NODE_SIGNATURE_KIND_ASSET_UPDATE"
      ],
      "default": "NODE_SIGNATURE_KIND_UNSPECIFIED",
      "description": "- NODE_SIGNATURE_KIND_UNSPECIFIED: Represents an unspecified or missing value from the input\n - NODE_SIGNATURE_KIND_ASSET_NEW: Represents a signature for a new asset allow-listing\n - NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL: Represents a signature for an asset withdrawal\n - NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_ADDED: Represents a signature for a new signer added to the erc20 multisig contract\n - NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_REMOVED: Represents a signature for a signer removed from the erc20 multisig contract\n - NODE_SIGNATURE_KIND_ASSET_UPDATE: Represents a signature for an asset update allow-listing",
      "title": "The kind of signature created by a node, for example, allow-listing a new asset, withdrawal etc"
    },
    "v1ObserveEventBusResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BusEvent"
          },
          "title": "One or more events"
        }
      },
      "title": "Response to a subscribed stream of events from the Vega event bus"
    },
    "v1OracleDataSubmission": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/OracleDataSubmissionOracleSource",
          "description": "The source from which the data is coming from. Must be base64 encoded.\nOracle data is a type of external data source data."
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "title": "The data provided by the data source\nIn the case of Open Oracle - it will be the entire object - it will contain messages, signatures and price data"
        }
      },
      "title": "Command to submit new Oracle data from third party providers"
    },
    "v1OrderAmendment": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "title": "Order identifier, this is required to find the order and will not be updated, required field"
        },
        "marketId": {
          "type": "string",
          "title": "Market identifier, this is required to find the order and will not be updated"
        },
        "price": {
          "type": "string",
          "description": "Amend the price for the order if the price value is set, otherwise price will remain unchanged.\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "sizeDelta": {
          "type": "string",
          "format": "int64",
          "description": "Amend the size for the order by the delta specified:\n- To reduce the size from the current value set a negative integer value\n- To increase the size from the current value, set a positive integer value\n- To leave the size unchanged set a value of zero\nThis field needs to be scaled using the market's position decimal places."
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Amend the time in force for the order, set to TIME_IN_FORCE_UNSPECIFIED to remain unchanged\n- See [`TimeInForce`](#api.VegaTimeResponse).`timestamp`"
        },
        "peggedOffset": {
          "type": "string",
          "description": "Amend the pegged order offset for the order\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "peggedReference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "Amend the pegged order reference for the order\n- See [`PeggedReference`](#vega.PeggedReference)"
        }
      },
      "title": "An order amendment is a request to amend or update an existing order on Vega"
    },
    "v1OrderCancellation": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "title": "Unique identifier for the order (set by the system after consensus), required field"
        },
        "marketId": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        }
      },
      "title": "An order cancellation is a request to cancel an existing order on Vega"
    },
    "v1OrderSubmission": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        },
        "price": {
          "type": "string",
          "description": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places,\n, required field for limit orders, however it is not required for market orders\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "description": "Size for the order, for example, in a futures market the size equals the number of units, cannot be negative\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places."
        },
        "side": {
          "$ref": "#/definitions/vegaSide",
          "title": "Side for the order, e.g. SIDE_BUY or SIDE_SELL, required field\n- See `Side`"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Time in force indicates how long an order will remain active before it is executed or expires, required field\n- See `Order.TimeInForce`"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order will expire, in nanoseconds since the epoch,\nrequired field only for `Order.TimeInForce`.TIME_IN_FORCE_GTT`\n- See `VegaTimeResponse`.`timestamp`"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType",
          "title": "Type for the order, required field - See `Order.Type`"
        },
        "reference": {
          "type": "string",
          "title": "Reference given for the order, this is typically used to retrieve an order submitted through consensus, currently\nset internally by the node to return a unique reference identifier for the order submission"
        },
        "peggedOrder": {
          "$ref": "#/definitions/vegaPeggedOrder",
          "title": "Used to specify the details for a pegged order\n- See `PeggedOrder`"
        }
      },
      "title": "An order submission is a request to submit or create a new order on Vega"
    },
    "v1PoWBlockState": {
      "type": "object",
      "properties": {
        "blockHeight": {
          "type": "string",
          "format": "uint64",
          "title": "Block height for the current Proof of Work state statistics"
        },
        "blockHash": {
          "type": "string",
          "title": "Hash of the current block"
        },
        "transactionsSeen": {
          "type": "string",
          "format": "uint64",
          "title": "Total number of transactions seen in the block"
        },
        "expectedDifficulty": {
          "type": "string",
          "format": "uint64",
          "description": "This is the minimum required difficulty for the next transaction submitted on this block\nif it is possible to submit more transactions on this block, otherwise nil."
        },
        "hashFunction": {
          "type": "string",
          "title": "The hashing function used to calculate the block hash"
        },
        "difficulty": {
          "type": "string",
          "format": "uint64",
          "title": "The base difficulty for this block for when transactions seen \u003c tx_per_block"
        },
        "txPerBlock": {
          "type": "string",
          "format": "uint64",
          "title": "The number of transactions that can have their proof-of-work calculated with this block hash before\neither the difficulty increases, or no more transactions can use this block hash"
        },
        "increasingDifficulty": {
          "type": "boolean",
          "title": "Whether or not this block allows for increasing proof-of-work difficulty if the\ntx-per-block-hash limit has been reached"
        }
      },
      "title": "The PoW state for a given block"
    },
    "v1PoWStatistic": {
      "type": "object",
      "properties": {
        "blockStates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1PoWBlockState"
          },
          "title": "Block state for each block in scope for PoW calculation"
        },
        "bannedUntil": {
          "type": "string",
          "title": "PoW banned until timestamp as RFC3339Nano"
        },
        "numberOfPastBlocks": {
          "type": "string",
          "format": "uint64",
          "title": "The number of block behind the current block whose hash can be used for proof-of-work calculations"
        }
      },
      "title": "Proof of work statistics for a party"
    },
    "v1PositionResolution": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "distressed": {
          "type": "string",
          "format": "int64",
          "title": "Number of distressed traders"
        },
        "closed": {
          "type": "string",
          "format": "int64",
          "title": "Number of close outs"
        },
        "markPrice": {
          "type": "string",
          "title": "Mark price as a string representing a scaled price"
        }
      },
      "title": "A position resolution event contains information on distressed trades"
    },
    "v1PositionStateEvent": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "title": "Party identifier for this position update"
        },
        "marketId": {
          "type": "string",
          "title": "Market identifier for this position update"
        },
        "size": {
          "type": "string",
          "format": "int64",
          "title": "Current position"
        },
        "potentialBuys": {
          "type": "string",
          "format": "int64",
          "title": "Potential orders"
        },
        "potentialSells": {
          "type": "string",
          "format": "int64"
        },
        "vwBuyPrice": {
          "type": "string",
          "title": "Volume weighted prices"
        },
        "vwSellPrice": {
          "type": "string"
        }
      },
      "title": "A position state event contains the current position state for a single party in a single market"
    },
    "v1ProofOfWork": {
      "type": "object",
      "properties": {
        "tid": {
          "type": "string",
          "description": "A unique transaction identifier used to seed the proof-of-work hash."
        },
        "nonce": {
          "type": "string",
          "format": "uint64",
          "description": "A number which, combined with the transaction identifier, will produce a hash with the required number of leading zeros to be accepted by the network."
        }
      },
      "title": "Components needed for the network to verify proof-of-work"
    },
    "v1PropagateChainEventResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Success will be true if the event was accepted by the node,\n**Important** - success does not mean that the event is confirmed by consensus"
        }
      },
      "title": "Response for a new event sent by the blockchain queue to be propagated on Vega"
    },
    "v1Property": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the property."
        },
        "value": {
          "type": "string",
          "description": "value is the value of the property."
        },
        "numberDecimalPlaces": {
          "type": "string",
          "format": "uint64",
          "title": "An optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
        }
      },
      "description": "Property describes one property of data spec with a key with its value."
    },
    "v1PropertyKey": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the property."
        },
        "type": {
          "$ref": "#/definitions/v1PropertyKeyType",
          "description": "type is the type of the property."
        },
        "numberDecimalPlaces": {
          "type": "string",
          "format": "uint64",
          "title": "An optional decimal place to be be applied on the provided value\nvalid only for PropertyType of type DECIMAL and INTEGER"
        }
      },
      "description": "PropertyKey describes the property key contained in data source data."
    },
    "v1PropertyKeyType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_EMPTY",
        "TYPE_INTEGER",
        "TYPE_STRING",
        "TYPE_BOOLEAN",
        "TYPE_DECIMAL",
        "TYPE_TIMESTAMP"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "Type describes the type of properties that are supported by the data source\nengine.\n\n - TYPE_UNSPECIFIED: The default value.\n - TYPE_EMPTY: Any type.\n - TYPE_INTEGER: Integer type.\n - TYPE_STRING: String type.\n - TYPE_BOOLEAN: Boolean type.\n - TYPE_DECIMAL: Any floating point decimal type.\n - TYPE_TIMESTAMP: Timestamp date type."
    },
    "v1ProposalSubmission": {
      "type": "object",
      "properties": {
        "reference": {
          "type": "string",
          "title": "Proposal reference"
        },
        "terms": {
          "$ref": "#/definitions/vegaProposalTerms",
          "title": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted"
        },
        "rationale": {
          "$ref": "#/definitions/vegaProposalRationale",
          "description": "The rationale behind a proposal."
        }
      },
      "title": "A command to submit a new proposal for the\nVega network governance"
    },
    "v1ProtocolUpgradeDataNodeReady": {
      "type": "object",
      "properties": {
        "lastBlockHeight": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "The data node is ready fro protocol upgrade"
    },
    "v1ProtocolUpgradeEvent": {
      "type": "object",
      "properties": {
        "upgradeBlockHeight": {
          "type": "string",
          "format": "uint64",
          "title": "The block height at which to perform the upgrade"
        },
        "vegaReleaseTag": {
          "type": "string",
          "title": "the release tag for the vega binary"
        },
        "approvers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "tendermint validators that have agreed to the upgrade"
        },
        "status": {
          "$ref": "#/definitions/v1ProtocolUpgradeProposalStatus",
          "title": "the status of the proposal"
        }
      }
    },
    "v1ProtocolUpgradeProposal": {
      "type": "object",
      "properties": {
        "upgradeBlockHeight": {
          "type": "string",
          "format": "uint64",
          "title": "The block height at which to perform the upgrade"
        },
        "vegaReleaseTag": {
          "type": "string",
          "title": "the release tag for the Vega binary"
        }
      },
      "title": "A transaction for a validator to suggest a protocol upgrade"
    },
    "v1ProtocolUpgradeProposalStatus": {
      "type": "string",
      "enum": [
        "PROTOCOL_UPGRADE_PROPOSAL_STATUS_UNSPECIFIED",
        "PROTOCOL_UPGRADE_PROPOSAL_STATUS_PENDING",
        "PROTOCOL_UPGRADE_PROPOSAL_STATUS_APPROVED",
        "PROTOCOL_UPGRADE_PROPOSAL_STATUS_REJECTED"
      ],
      "default": "PROTOCOL_UPGRADE_PROPOSAL_STATUS_UNSPECIFIED",
      "title": "- PROTOCOL_UPGRADE_PROPOSAL_STATUS_PENDING: The proposal is pending\n - PROTOCOL_UPGRADE_PROPOSAL_STATUS_APPROVED: The proposal is approved\n - PROTOCOL_UPGRADE_PROPOSAL_STATUS_REJECTED: The proposal is rejected"
    },
    "v1ProtocolUpgradeStarted": {
      "type": "object",
      "properties": {
        "lastBlockHeight": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "The core is starting a protocol upgrade"
    },
    "v1PubKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      },
      "description": "PubKey is the public key that signed this data.\nDifferent public keys coming from different sources will be further separated."
    },
    "v1RewardPayoutEvent": {
      "type": "object",
      "properties": {
        "party": {
          "type": "string"
        },
        "epochSeq": {
          "type": "string"
        },
        "asset": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "percentOfTotalReward": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "rewardType": {
          "type": "string"
        },
        "market": {
          "type": "string"
        }
      }
    },
    "v1SettleDistressed": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "partyId": {
          "type": "string",
          "title": "Party identifier (public key) for the event"
        },
        "margin": {
          "type": "string",
          "title": "Margin value as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        },
        "price": {
          "type": "string",
          "title": "Price as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places"
        }
      },
      "title": "A settle distressed event contains information on distressed trading parties who are closed out"
    },
    "v1SettleMarket": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "price": {
          "type": "string",
          "title": "Price of settlement as a string"
        },
        "positionFactor": {
          "type": "string",
          "title": "Position factor - 10 ^ number of position decimal places"
        }
      },
      "title": "A settle market event to notify data node that a market has been settled\nso positions and PL can be updated accordingly"
    },
    "v1SettlePosition": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the event"
        },
        "partyId": {
          "type": "string",
          "title": "Party identifier (public key) for the event"
        },
        "price": {
          "type": "string",
          "title": "Price of settlement as a string"
        },
        "tradeSettlements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TradeSettlement"
          },
          "title": "A collection of 1 or more trade settlements"
        },
        "positionFactor": {
          "type": "string",
          "title": "Position factor - 10 ^ number of position decimal places"
        }
      },
      "title": "A settle position event contains position settlement information for a party"
    },
    "v1Signature": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The bytes of the signature (hex-encoded)."
        },
        "algo": {
          "type": "string",
          "description": "The algorithm used to create the signature."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version of the signature used to create the signature."
        }
      },
      "description": "A signature to authenticate a transaction and to be verified by the Vega\nnetwork."
    },
    "v1Signer": {
      "type": "object",
      "properties": {
        "pubKey": {
          "$ref": "#/definitions/v1PubKey",
          "description": "pubKeys is the list of authorized public keys that signed the data for this\nsource. All the public keys in the data should be contained in these\npublic keys."
        },
        "ethAddress": {
          "$ref": "#/definitions/v1ETHAddress",
          "title": "in case of an open oracle - Ethereum address will be submitted"
        }
      }
    },
    "v1SpamStatistic": {
      "type": "object",
      "properties": {
        "countForEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The current transaction count received from the party during this epoch for this policy"
        },
        "maxForEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The maximum number of transactions allowed for this policy in an epoch"
        },
        "bannedUntil": {
          "type": "string",
          "title": "If blocked the timestamp when the party will be unblocked as RFC3339Nano"
        },
        "minTokensRequired": {
          "type": "string",
          "title": "The effective minimum number of tokens required to submit a transaction of this type"
        }
      },
      "title": "The statistics for a given spam policy"
    },
    "v1SpamStatistics": {
      "type": "object",
      "properties": {
        "proposals": {
          "$ref": "#/definitions/v1SpamStatistic",
          "title": "Statistics for proposal transactions made by the party"
        },
        "delegations": {
          "$ref": "#/definitions/v1SpamStatistic",
          "title": "Statistics for delegation transactions made by the party"
        },
        "transfers": {
          "$ref": "#/definitions/v1SpamStatistic",
          "title": "Statistics for transfer transactions made by the party"
        },
        "nodeAnnouncements": {
          "$ref": "#/definitions/v1SpamStatistic",
          "title": "Statistics for node announcement transactions made by the party"
        },
        "votes": {
          "$ref": "#/definitions/v1VoteSpamStatistics",
          "title": "Statistics for proposal votes made by the party"
        },
        "pow": {
          "$ref": "#/definitions/v1PoWStatistic",
          "title": "Statistics for proof of work difficulty observed per block for the party"
        },
        "issueSignatures": {
          "$ref": "#/definitions/v1SpamStatistic",
          "title": "Statistics for multisig signatures issued for the party"
        },
        "epochSeq": {
          "type": "string",
          "format": "uint64",
          "title": "The epoch in which these statistics apply to"
        }
      },
      "title": "The complete spam statistics captured for a given party"
    },
    "v1StakeLinking": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The internal ID for this staking event"
        },
        "type": {
          "$ref": "#/definitions/v1StakeLinkingType",
          "title": "The type of event"
        },
        "ts": {
          "type": "string",
          "format": "int64",
          "title": "The timestamps at which the event was emitted by ethereum"
        },
        "party": {
          "type": "string",
          "description": "The party to whom the event is directed at."
        },
        "amount": {
          "type": "string",
          "title": "The amount of stake deposited or removed"
        },
        "status": {
          "$ref": "#/definitions/v1StakeLinkingStatus",
          "title": "The status of the event"
        },
        "finalizedAt": {
          "type": "string",
          "format": "int64",
          "title": "The time at which the vega network finalized the state of the event"
        },
        "txHash": {
          "type": "string",
          "title": "The hash of the transaction from which the events happen"
        },
        "blockHeight": {
          "type": "string",
          "format": "uint64",
          "title": "The block when the event happened"
        },
        "blockTime": {
          "type": "string",
          "format": "int64",
          "title": "The block time"
        },
        "logIndex": {
          "type": "string",
          "format": "uint64",
          "title": "The log index"
        },
        "ethereumAddress": {
          "type": "string",
          "title": "the ethereum address from which the stake link was initiated"
        }
      },
      "title": "StakeLinking - an event notifying of stake being deposited or removed for a given party\nThese events are emitted for every Staking deposit or removed accepted by the network"
    },
    "v1StakeLinkingStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_PENDING",
        "STATUS_ACCEPTED",
        "STATUS_REJECTED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "title": "- STATUS_UNSPECIFIED: Default value\n - STATUS_PENDING: Indicates an event waiting for confirmation from the Vega network\n - STATUS_ACCEPTED: Indicates an event accepted by the Vega network\n - STATUS_REJECTED: Indicates an event rejected by the Vega network"
    },
    "v1StakeLinkingType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_LINK",
        "TYPE_UNLINK"
      ],
      "default": "TYPE_UNSPECIFIED",
      "title": "- TYPE_UNSPECIFIED: Default value\n - TYPE_LINK: Indicate of a stake deposit instruction\n - TYPE_UNLINK: Indicate of a stake remove instruction"
    },
    "v1StateVar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "eventId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "title": "StateVarEvent - updates on state changes in state variable consensus"
    },
    "v1Statistics": {
      "type": "object",
      "properties": {
        "blockHeight": {
          "type": "string",
          "format": "uint64",
          "title": "Current block height as reported by the Vega blockchain"
        },
        "backlogLength": {
          "type": "string",
          "format": "uint64",
          "title": "Current backlog length (number of transactions) that are waiting to be included in a block"
        },
        "totalPeers": {
          "type": "string",
          "format": "uint64",
          "title": "Total number of connected peers to this node"
        },
        "genesisTime": {
          "type": "string",
          "title": "Genesis block date and time formatted in ISO-8601 datetime format with nanosecond precision"
        },
        "currentTime": {
          "type": "string",
          "title": "Current system date and time formatted in ISO-8601 datetime format with nanosecond precision"
        },
        "vegaTime": {
          "type": "string",
          "title": "Current Vega date and time formatted in ISO-8601 datetime format with nanosecond precision"
        },
        "status": {
          "$ref": "#/definitions/vegaChainStatus",
          "title": "Status of the connection to the Vega blockchain\n- See [`ChainStatus`](#vega.ChainStatus)"
        },
        "txPerBlock": {
          "type": "string",
          "format": "uint64",
          "title": "Transactions per block"
        },
        "averageTxBytes": {
          "type": "string",
          "format": "uint64",
          "title": "Average transaction size in bytes"
        },
        "averageOrdersPerBlock": {
          "type": "string",
          "format": "uint64",
          "title": "Average orders per block"
        },
        "tradesPerSecond": {
          "type": "string",
          "format": "uint64",
          "title": "Trades emitted per second"
        },
        "ordersPerSecond": {
          "type": "string",
          "format": "uint64",
          "title": "Orders processed per second"
        },
        "totalMarkets": {
          "type": "string",
          "format": "uint64",
          "title": "Total markets on this Vega network"
        },
        "totalAmendOrder": {
          "type": "string",
          "format": "uint64",
          "title": "Total number of order amendments since genesis (on all markets)"
        },
        "totalCancelOrder": {
          "type": "string",
          "format": "uint64",
          "title": "Total number of order cancellations since genesis (on all markets)"
        },
        "totalCreateOrder": {
          "type": "string",
          "format": "uint64",
          "title": "Total number of order submissions since genesis (on all markets)"
        },
        "totalOrders": {
          "type": "string",
          "format": "uint64",
          "title": "Total number of orders processed since genesis (on all markets)"
        },
        "totalTrades": {
          "type": "string",
          "format": "uint64",
          "title": "Total number of trades emitted since genesis (on all markets)"
        },
        "orderSubscriptions": {
          "type": "integer",
          "format": "int64",
          "title": "Current number of stream subscribers to order data"
        },
        "tradeSubscriptions": {
          "type": "integer",
          "format": "int64",
          "title": "Current number of stream subscribers to trade data"
        },
        "candleSubscriptions": {
          "type": "integer",
          "format": "int64",
          "title": "Current number of stream subscribers to candle-stick data"
        },
        "marketDepthSubscriptions": {
          "type": "integer",
          "format": "int64",
          "title": "Current number of stream subscribers to market depth data"
        },
        "positionsSubscriptions": {
          "type": "integer",
          "format": "int64",
          "title": "Current number of stream subscribers to positions data"
        },
        "accountSubscriptions": {
          "type": "integer",
          "format": "int64",
          "title": "Current number of stream subscribers to account data"
        },
        "marketDataSubscriptions": {
          "type": "integer",
          "format": "int64",
          "title": "Current number of stream subscribers to market data"
        },
        "appVersionHash": {
          "type": "string",
          "title": "The version hash of the Vega node software"
        },
        "appVersion": {
          "type": "string",
          "title": "The version of the Vega node software"
        },
        "chainVersion": {
          "type": "string",
          "title": "The version of the underlying Vega blockchain"
        },
        "blockDuration": {
          "type": "string",
          "format": "uint64",
          "title": "Current block duration, in nanoseconds"
        },
        "uptime": {
          "type": "string",
          "title": "Total uptime for this node formatted in ISO-8601 datetime format with nanosecond precision"
        },
        "chainId": {
          "type": "string",
          "title": "Unique identifier for the underlying Vega blockchain"
        },
        "marketDepthUpdatesSubscriptions": {
          "type": "integer",
          "format": "int64",
          "title": "Current number of stream subscribers to market depth update data"
        },
        "blockHash": {
          "type": "string",
          "title": "Current block hash"
        },
        "epochSeq": {
          "type": "string",
          "format": "uint64",
          "title": "Current epoch"
        },
        "epochStartTime": {
          "type": "string",
          "title": "Epoch start time"
        },
        "epochExpiryTime": {
          "type": "string",
          "title": "Epoch expected end time"
        },
        "eventCount": {
          "type": "string",
          "format": "uint64",
          "title": "Number of events in the last block"
        },
        "eventsPerSecond": {
          "type": "string",
          "format": "uint64",
          "title": "Rate of events per second in the last block"
        }
      },
      "title": "Vega domain specific statistics as reported by the node the caller is connected to"
    },
    "v1StatisticsResponse": {
      "type": "object",
      "properties": {
        "statistics": {
          "$ref": "#/definitions/v1Statistics"
        }
      }
    },
    "v1SubmitRawTransactionRequest": {
      "type": "object",
      "properties": {
        "tx": {
          "type": "string",
          "format": "byte",
          "title": "A bundle of signed payload and signature marshalled into a byte array, to form a transaction that will be submitted to the Vega blockchain"
        },
        "type": {
          "$ref": "#/definitions/v1SubmitRawTransactionRequestType",
          "title": "Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response"
        }
      },
      "title": "Request for submitting a version agnostic transaction on Vega"
    },
    "v1SubmitRawTransactionRequestType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_ASYNC",
        "TYPE_SYNC",
        "TYPE_COMMIT"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_ASYNC: The transaction will be submitted without waiting for response\n - TYPE_SYNC: The transaction will be submitted, and blocking until the\ntendermint mempool return a response\n - TYPE_COMMIT: The transaction will submitted, and blocking until the tendermint\nnetwork will have committed it into a block",
      "title": "Blockchain transaction type"
    },
    "v1SubmitRawTransactionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Success will be true if the transaction was accepted by the node,\n**Important** - success does not mean that the event is confirmed by consensus"
        },
        "txHash": {
          "type": "string",
          "title": "Hash of the transaction, if accepted"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "data": {
          "type": "string"
        },
        "log": {
          "type": "string"
        },
        "height": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Response for submitting a version agnostic transaction on Vega"
    },
    "v1SubmitTransactionRequest": {
      "type": "object",
      "properties": {
        "tx": {
          "$ref": "#/definitions/v1Transaction",
          "title": "A bundle of signed payload and signature, to form a transaction that will be submitted to the Vega blockchain"
        },
        "type": {
          "$ref": "#/definitions/v1SubmitTransactionRequestType",
          "title": "Type of transaction request, for example ASYNC, meaning the transaction will be submitted and not block on a response"
        }
      },
      "title": "Request for submitting a transaction v2 on Vega"
    },
    "v1SubmitTransactionRequestType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_ASYNC",
        "TYPE_SYNC",
        "TYPE_COMMIT"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_ASYNC: The transaction will be submitted without waiting for response\n - TYPE_SYNC: The transaction will be submitted, and blocking until the\ntendermint mempool return a response\n - TYPE_COMMIT: The transaction will submitted, and blocking until the tendermint\nnetwork will have committed it into a block",
      "title": "Blockchain transaction type"
    },
    "v1SubmitTransactionResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "Success will be true if the transaction was accepted by the node,\n**Important** - success does not mean that the event is confirmed by consensus"
        },
        "txHash": {
          "type": "string",
          "title": "Hash of the transaction, if accepted"
        },
        "code": {
          "type": "integer",
          "format": "int64",
          "title": "Result code for success if unsuccessful"
        },
        "data": {
          "type": "string",
          "title": "Data for details"
        },
        "log": {
          "type": "string"
        },
        "height": {
          "type": "string",
          "format": "int64",
          "title": "Height for commit"
        }
      },
      "title": "Response for submitting a transaction v2 on Vega"
    },
    "v1TimeUpdate": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp containing latest update from Vega blockchain aka Vega-time"
        }
      },
      "title": "A time update event contains the latest time update from Vega blockchain and indicates the start of a new block"
    },
    "v1TradeSettlement": {
      "type": "object",
      "properties": {
        "size": {
          "type": "string",
          "format": "int64",
          "title": "Size of trade settlement"
        },
        "price": {
          "type": "string",
          "title": "Price of settlement as string (in asset decimals)"
        },
        "marketPrice": {
          "type": "string",
          "title": "Price of settlement as a string (in market decimals)"
        }
      },
      "title": "A trade settlement is part of the settle position event"
    },
    "v1Transaction": {
      "type": "object",
      "properties": {
        "inputData": {
          "type": "string",
          "format": "byte",
          "title": "One of the set of Vega commands.\nThese bytes are should be built as follows:\n  chain_id_as_bytes + \\0 character as delimiter + proto_marshalled_command"
        },
        "signature": {
          "$ref": "#/definitions/v1Signature",
          "description": "The signature of the inputData."
        },
        "address": {
          "type": "string",
          "description": "The address of the sender (hex-encoded). Not supported yet."
        },
        "pubKey": {
          "type": "string",
          "description": "The public key of the sender (hex-encoded)."
        },
        "version": {
          "$ref": "#/definitions/v1TxVersion",
          "description": "A version of the transaction, to be used in the future in case changes are implemented\nto the transaction format."
        },
        "pow": {
          "$ref": "#/definitions/v1ProofOfWork",
          "description": "Proof of work contains the random transaction id used by the client and the nonce."
        }
      },
      "description": "Represents a transaction to be sent to Vega."
    },
    "v1TransactionResult": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "title": "Unique party identifier for the related party"
        },
        "status": {
          "type": "boolean",
          "description": "The status of the transaction, did it succeed or an error was raised."
        },
        "hash": {
          "type": "string",
          "title": "The hash of the transaction"
        },
        "orderSubmission": {
          "$ref": "#/definitions/v1OrderSubmission"
        },
        "orderAmendment": {
          "$ref": "#/definitions/v1OrderAmendment"
        },
        "orderCancellation": {
          "$ref": "#/definitions/v1OrderCancellation"
        },
        "proposal": {
          "$ref": "#/definitions/v1ProposalSubmission"
        },
        "voteSubmission": {
          "$ref": "#/definitions/v1VoteSubmission"
        },
        "liquidityProvisionSubmission": {
          "$ref": "#/definitions/v1LiquidityProvisionSubmission"
        },
        "withdrawSubmission": {
          "$ref": "#/definitions/v1WithdrawSubmission"
        },
        "delegateSubmission": {
          "$ref": "#/definitions/v1DelegateSubmission"
        },
        "undelegateSubmission": {
          "$ref": "#/definitions/v1UndelegateSubmission"
        },
        "liquidityProvisionCancellation": {
          "$ref": "#/definitions/v1LiquidityProvisionCancellation"
        },
        "liquidityProvisionAmendment": {
          "$ref": "#/definitions/v1LiquidityProvisionAmendment"
        },
        "transfer": {
          "$ref": "#/definitions/vegacommandsv1Transfer"
        },
        "cancelTransfer": {
          "$ref": "#/definitions/v1CancelTransfer"
        },
        "announceNode": {
          "$ref": "#/definitions/v1AnnounceNode"
        },
        "oracleDataSubmission": {
          "$ref": "#/definitions/v1OracleDataSubmission"
        },
        "protocolUpgradeProposal": {
          "$ref": "#/definitions/v1ProtocolUpgradeProposal"
        },
        "issueSignatures": {
          "$ref": "#/definitions/v1IssueSignatures"
        },
        "batchMarketInstructions": {
          "$ref": "#/definitions/v1BatchMarketInstructions"
        },
        "keyRotateSubmission": {
          "$ref": "#/definitions/v1KeyRotateSubmission"
        },
        "ethereumKeyRotateSubmission": {
          "$ref": "#/definitions/v1EthereumKeyRotateSubmission"
        },
        "success": {
          "$ref": "#/definitions/TransactionResultSuccessDetails"
        },
        "failure": {
          "$ref": "#/definitions/TransactionResultFailureDetails"
        }
      }
    },
    "v1TransferStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_PENDING",
        "STATUS_DONE",
        "STATUS_REJECTED",
        "STATUS_STOPPED",
        "STATUS_CANCELLED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "title": "- STATUS_UNSPECIFIED: Default value\n - STATUS_PENDING: Indicates a transfer still being processed\n - STATUS_DONE: Indicates a transfer accepted by the Vega network\n - STATUS_REJECTED: Indicates a transfer rejected by the Vega network\n - STATUS_STOPPED: Indicates a transfer stopped by the Vega network\ne.g: no funds left to cover the transfer\n - STATUS_CANCELLED: Indicates a transfer cancelled by the user"
    },
    "v1TxErrorEvent": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "title": "Unique party identifier for the related party"
        },
        "errMsg": {
          "type": "string",
          "title": "An error message describing what went wrong"
        },
        "orderSubmission": {
          "$ref": "#/definitions/v1OrderSubmission"
        },
        "orderAmendment": {
          "$ref": "#/definitions/v1OrderAmendment"
        },
        "orderCancellation": {
          "$ref": "#/definitions/v1OrderCancellation"
        },
        "proposal": {
          "$ref": "#/definitions/v1ProposalSubmission"
        },
        "voteSubmission": {
          "$ref": "#/definitions/v1VoteSubmission"
        },
        "liquidityProvisionSubmission": {
          "$ref": "#/definitions/v1LiquidityProvisionSubmission"
        },
        "withdrawSubmission": {
          "$ref": "#/definitions/v1WithdrawSubmission"
        },
        "delegateSubmission": {
          "$ref": "#/definitions/v1DelegateSubmission"
        },
        "undelegateSubmission": {
          "$ref": "#/definitions/v1UndelegateSubmission"
        },
        "liquidityProvisionCancellation": {
          "$ref": "#/definitions/v1LiquidityProvisionCancellation"
        },
        "liquidityProvisionAmendment": {
          "$ref": "#/definitions/v1LiquidityProvisionAmendment"
        },
        "transfer": {
          "$ref": "#/definitions/vegacommandsv1Transfer"
        },
        "cancelTransfer": {
          "$ref": "#/definitions/v1CancelTransfer"
        },
        "announceNode": {
          "$ref": "#/definitions/v1AnnounceNode"
        },
        "oracleDataSubmission": {
          "$ref": "#/definitions/v1OracleDataSubmission"
        },
        "protocolUpgradeProposal": {
          "$ref": "#/definitions/v1ProtocolUpgradeProposal"
        },
        "issueSignatures": {
          "$ref": "#/definitions/v1IssueSignatures"
        },
        "batchMarketInstructions": {
          "$ref": "#/definitions/v1BatchMarketInstructions"
        }
      }
    },
    "v1TxVersion": {
      "type": "string",
      "enum": [
        "TX_VERSION_UNSPECIFIED",
        "TX_VERSION_V2",
        "TX_VERSION_V3"
      ],
      "default": "TX_VERSION_UNSPECIFIED",
      "description": "The current supported version of the transaction inside the network.\n\n - TX_VERSION_UNSPECIFIED: Represents an unspecified or missing value from the input\n - TX_VERSION_V2: This version requires the proof-of-work added to the transaction.\n - TX_VERSION_V3: This version requires the chain ID to be appended in front of the input data\nbyte, with a `\\0` delimiter."
    },
    "v1UndelegateSubmission": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "description": "optional, if not specified = ALL\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset decimal places for the token."
        },
        "method": {
          "$ref": "#/definitions/UndelegateSubmissionMethod"
        }
      }
    },
    "v1ValidatorRankingEvent": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string"
        },
        "stakeScore": {
          "type": "string",
          "title": "stake based score - no anti-whaling"
        },
        "performanceScore": {
          "type": "string",
          "title": "performance base score"
        },
        "rankingScore": {
          "type": "string",
          "title": "final score"
        },
        "previousStatus": {
          "type": "string",
          "title": "the status of the validator in the previous epoch"
        },
        "nextStatus": {
          "type": "string",
          "title": "the status of the validator in the next epoch"
        },
        "epochSeq": {
          "type": "string",
          "title": "the epoch seq for which the status is valid"
        },
        "tmVotingPower": {
          "type": "integer",
          "format": "int64",
          "title": "tendermint voting power of the validator"
        }
      },
      "title": "An event that explains the status of the validator for the coming epoch"
    },
    "v1ValidatorScoreEvent": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string"
        },
        "epochSeq": {
          "type": "string"
        },
        "validatorScore": {
          "type": "string"
        },
        "normalisedScore": {
          "type": "string"
        },
        "validatorPerformance": {
          "type": "string"
        },
        "rawValidatorScore": {
          "type": "string"
        },
        "validatorStatus": {
          "type": "string"
        },
        "multisigScore": {
          "type": "string"
        }
      },
      "title": "ValidatorScoreEvent is the score a validator gets for a given epoch"
    },
    "v1ValidatorUpdate": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "title": "Node id of the node"
        },
        "vegaPubKey": {
          "type": "string",
          "title": "Vega public key of validator node"
        },
        "ethereumAddress": {
          "type": "string",
          "title": "Ethereum public key of validator node"
        },
        "tmPubKey": {
          "type": "string",
          "title": "Public key of Tendermint"
        },
        "infoUrl": {
          "type": "string",
          "title": "URL with more info on the node"
        },
        "country": {
          "type": "string",
          "title": "Country code (ISO 3166-1 alpha-2) for the location of the node"
        },
        "name": {
          "type": "string",
          "title": "Name of the validator"
        },
        "avatarUrl": {
          "type": "string",
          "title": "AvatarURL of the validator"
        },
        "vegaPubKeyIndex": {
          "type": "integer",
          "format": "int64",
          "title": "Vega public key derivation index"
        },
        "added": {
          "type": "boolean",
          "title": "Flag indicating if the validator has been added to or removed from vega"
        },
        "fromEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The epoch in which the announced pending node will start participating in the network"
        },
        "submitterAddress": {
          "type": "string",
          "title": "Ethereum public key being used as the submitter to allow automatic signature generation"
        },
        "epochSeq": {
          "type": "string",
          "format": "uint64",
          "title": "The epoch in which the node was announced or removed from the network"
        }
      },
      "title": "A validator update event contains information about validator node"
    },
    "v1VoteSpamStatistic": {
      "type": "object",
      "properties": {
        "proposal": {
          "type": "string"
        },
        "countForEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The current vote count received from the party for the given proposal during this epoch"
        },
        "minTokensRequired": {
          "type": "string",
          "title": "The effective minimum number of tokens required to vote on the proposal"
        }
      },
      "description": "The vote statistics for the voting spam policies\nwhich are calculated as a ratio of the total votes\nthat have been rejected."
    },
    "v1VoteSpamStatistics": {
      "type": "object",
      "properties": {
        "statistics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1VoteSpamStatistic"
          },
          "title": "List of statistics for proposals voted on by the party"
        },
        "maxForEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The maximum number of votes per proposal allowed in an epoch"
        },
        "bannedUntil": {
          "type": "string",
          "title": "If blocked the timestamp when the party will be unblocked as RFC3339Nano"
        }
      },
      "title": "The voting statistics by proposal for a given party for the current epoch"
    },
    "v1VoteSubmission": {
      "type": "object",
      "properties": {
        "proposalId": {
          "type": "string",
          "description": "The ID of the proposal to vote for."
        },
        "value": {
          "$ref": "#/definitions/vegaVoteValue",
          "title": "The actual value of the vote"
        }
      },
      "description": "A command to submit a new vote for a governance\nproposal."
    },
    "v1WithdrawSubmission": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "description": "The amount to be withdrawn\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "asset": {
          "type": "string",
          "title": "The asset to be withdrawn"
        },
        "ext": {
          "$ref": "#/definitions/vegaWithdrawExt",
          "title": "Foreign chain specifics"
        }
      },
      "title": "Represents the submission request to withdraw funds for a party on Vega"
    },
    "vegaAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique account identifier (used internally by Vega)"
        },
        "owner": {
          "type": "string",
          "title": "The party that the account belongs to, special values include `network`, which represents the Vega network and is\nmost commonly seen during liquidation of distressed trading positions"
        },
        "balance": {
          "type": "string",
          "description": "Balance of the asset, the balance is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places\nand importantly balances cannot be negative\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "asset": {
          "type": "string",
          "title": "Asset identifier for the account"
        },
        "marketId": {
          "type": "string",
          "title": "Market identifier for the account, if [`AccountType`](#vega.AccountType).`ACCOUNT_TYPE_GENERAL` this will be empty"
        },
        "type": {
          "$ref": "#/definitions/vegaAccountType",
          "title": "The account type related to this account"
        }
      },
      "title": "Represents an account for an asset on Vega for a particular owner or party"
    },
    "vegaAccountDetails": {
      "type": "object",
      "properties": {
        "assetId": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/vegaAccountType"
        },
        "owner": {
          "type": "string",
          "title": "not specified if network account"
        },
        "marketId": {
          "type": "string",
          "title": "not specified is account is not related to a market"
        }
      }
    },
    "vegaAccountType": {
      "type": "string",
      "enum": [
        "ACCOUNT_TYPE_UNSPECIFIED",
        "ACCOUNT_TYPE_INSURANCE",
        "ACCOUNT_TYPE_SETTLEMENT",
        "ACCOUNT_TYPE_MARGIN",
        "ACCOUNT_TYPE_GENERAL",
        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
        "ACCOUNT_TYPE_FEES_LIQUIDITY",
        "ACCOUNT_TYPE_FEES_MAKER",
        "ACCOUNT_TYPE_BOND",
        "ACCOUNT_TYPE_EXTERNAL",
        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
        "ACCOUNT_TYPE_GLOBAL_REWARD",
        "ACCOUNT_TYPE_PENDING_TRANSFERS",
        "ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES",
        "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
        "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
        "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
      ],
      "default": "ACCOUNT_TYPE_UNSPECIFIED",
      "description": "- ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain funds set aside for the margin needed to support a party's open positions.\nEach party will have a margin account for each market they have traded in.\nThe required initial margin is allocated to each market from your general account.\nCollateral in the margin account can't be withdrawn or used as margin on another market until\nit is released back to the general account.\nThe Vega protocol uses an internal accounting system to segregate funds held as\nmargin from other funds to ensure they are never lost or 'double spent'\n\nMargin account funds will vary as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contain the collateral for a party that is not otherwise allocated. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset\n - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)\n - ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES: Per asset reward account for fees paid to makers\n - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers\n - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers\n - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold",
      "title": "Various collateral/account types as used by Vega"
    },
    "vegaAsset": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Internal identifier of the asset"
        },
        "details": {
          "$ref": "#/definitions/vegaAssetDetails",
          "title": "The definition of the external source for this asset"
        },
        "status": {
          "$ref": "#/definitions/vegaAssetStatus",
          "title": "Status of the asset"
        }
      },
      "title": "The Vega representation of an external asset"
    },
    "vegaAssetDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the asset (e.g: Great British Pound)"
        },
        "symbol": {
          "type": "string",
          "title": "Symbol of the asset (e.g: GBP)"
        },
        "decimals": {
          "type": "string",
          "format": "uint64",
          "title": "Number of decimal / precision handled by this asset"
        },
        "quantum": {
          "type": "string",
          "title": "The minimum economically meaningful amount in the asset"
        },
        "builtinAsset": {
          "$ref": "#/definitions/vegaBuiltinAsset",
          "title": "A built-in asset"
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20",
          "title": "An Ethereum ERC20 asset"
        }
      },
      "title": "The Vega representation of an external asset"
    },
    "vegaAssetDetailsUpdate": {
      "type": "object",
      "properties": {
        "quantum": {
          "type": "string",
          "title": "The minimum economically meaningful amount in the asset"
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20Update",
          "title": "An Ethereum ERC20 asset"
        }
      },
      "description": "The changes to apply on an existing asset."
    },
    "vegaAssetStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_PROPOSED",
        "STATUS_REJECTED",
        "STATUS_PENDING_LISTING",
        "STATUS_ENABLED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "title": "- STATUS_UNSPECIFIED: Default value, always invalid\n - STATUS_PROPOSED: Asset is proposed and under vote\n - STATUS_REJECTED: Asset has been rejected from governance\n - STATUS_PENDING_LISTING: Asset is pending listing from the bridge\n - STATUS_ENABLED: Asset is fully usable in the network"
    },
    "vegaAuctionDuration": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string",
          "format": "int64",
          "title": "Duration of the auction in seconds"
        },
        "volume": {
          "type": "string",
          "format": "uint64",
          "title": "Target uncrossing trading volume"
        }
      },
      "title": "An auction duration is used to configure 3 auction periods:\n1. `duration \u003e 0`, `volume == 0`:\n  The auction will last for at least N seconds\n2. `duration == 0`, `volume \u003e 0`:\n  The auction will end once the given volume will match at uncrossing\n3. `duration \u003e 0`, `volume \u003e 0`:\n  The auction will take at least N seconds, but can end sooner if the market can trade a certain volume"
    },
    "vegaAuctionTrigger": {
      "type": "string",
      "enum": [
        "AUCTION_TRIGGER_UNSPECIFIED",
        "AUCTION_TRIGGER_BATCH",
        "AUCTION_TRIGGER_OPENING",
        "AUCTION_TRIGGER_PRICE",
        "AUCTION_TRIGGER_LIQUIDITY"
      ],
      "default": "AUCTION_TRIGGER_UNSPECIFIED",
      "description": "- AUCTION_TRIGGER_UNSPECIFIED: Default value for AuctionTrigger, no auction triggered\n - AUCTION_TRIGGER_BATCH: Batch auction\n - AUCTION_TRIGGER_OPENING: Opening auction\n - AUCTION_TRIGGER_PRICE: Price monitoring trigger\n - AUCTION_TRIGGER_LIQUIDITY: Liquidity monitoring trigger",
      "title": "Auction triggers indicate what condition triggered an auction (if market is in auction mode)"
    },
    "vegaBuiltinAsset": {
      "type": "object",
      "properties": {
        "maxFaucetAmountMint": {
          "type": "string",
          "title": "Maximum amount that can be requested by a party through the built-in asset faucet at a time"
        }
      },
      "title": "A Vega internal asset"
    },
    "vegaChainStatus": {
      "type": "string",
      "enum": [
        "CHAIN_STATUS_UNSPECIFIED",
        "CHAIN_STATUS_DISCONNECTED",
        "CHAIN_STATUS_REPLAYING",
        "CHAIN_STATUS_CONNECTED"
      ],
      "default": "CHAIN_STATUS_UNSPECIFIED",
      "description": "- CHAIN_STATUS_UNSPECIFIED: Default value, always invalid\n - CHAIN_STATUS_DISCONNECTED: Blockchain is disconnected\n - CHAIN_STATUS_REPLAYING: Blockchain is replaying historic transactions\n - CHAIN_STATUS_CONNECTED: Blockchain is connected and receiving transactions",
      "title": "The Vega blockchain status as reported by the node the caller is connected to"
    },
    "vegaDataSourceDefinition": {
      "type": "object",
      "properties": {
        "internal": {
          "$ref": "#/definitions/vegaDataSourceDefinitionInternal"
        },
        "external": {
          "$ref": "#/definitions/vegaDataSourceDefinitionExternal"
        }
      },
      "description": "DataSourceDefinition represents the top level object that deals with data sources.\nDataSourceDefinition can be external or internal, with whatever number of data sources are defined\nfor each type in the child objects below."
    },
    "vegaDataSourceDefinitionExternal": {
      "type": "object",
      "properties": {
        "oracle": {
          "$ref": "#/definitions/vegaDataSourceSpecConfiguration"
        }
      },
      "description": "DataSourceDefinitionExternal is the top level object used for all external data sources.\nIt contains one of any of the defined `SourceType` variants."
    },
    "vegaDataSourceDefinitionInternal": {
      "type": "object",
      "properties": {
        "time": {
          "$ref": "#/definitions/vegaDataSourceSpecConfigurationTime"
        }
      },
      "description": "DataSourceDefinitionInternal is the top level object used for all internal data sources.\nIt contains one of any of the defined `SourceType` variants."
    },
    "vegaDataSourceSpec": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is a hash generated from the DataSpec data."
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "Creation Date time"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "Last Updated timestamp"
        },
        "data": {
          "$ref": "#/definitions/vegaDataSourceDefinition"
        },
        "status": {
          "$ref": "#/definitions/vegaDataSourceSpecStatus",
          "title": "status describes the status of the data source spec"
        }
      },
      "description": "A data source spec describes the data source base that a product (or a risk model)\nwants to get from the data source engine.\nThis message contains additional information used by the API."
    },
    "vegaDataSourceSpecConfiguration": {
      "type": "object",
      "properties": {
        "signers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Signer"
          },
          "description": "signers is the list of authorized signatures that signed the data for this\nsource. All the signatures in the data source data should be contained in this\nexternal source. All the signatures in the data should be contained in this list."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Filter"
          },
          "description": "filters describes which source data are considered of interest or not for\nthe product (or the risk model)."
        }
      },
      "description": "All types of external data sources use the same configuration set for meeting requirements\nin order for the data to be useful for Vega - valid signatures and matching filters."
    },
    "vegaDataSourceSpecConfigurationTime": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Condition"
          },
          "description": "Conditions that the timestamps should meet in order to be considered."
        }
      },
      "description": "DataSourceSpecConfigurationTime is the internal data source used for emitting timestamps."
    },
    "vegaDataSourceSpecStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_ACTIVE",
        "STATUS_DEACTIVATED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: The default value.\n - STATUS_ACTIVE: STATUS_ACTIVE describes an active data source spec.\n - STATUS_DEACTIVATED: STATUS_DEACTIVATED describes an data source spec that is not listening to data\nanymore.",
      "title": "Status describe the status of the data source spec"
    },
    "vegaDataSourceSpecToFutureBinding": {
      "type": "object",
      "properties": {
        "settlementDataProperty": {
          "type": "string",
          "description": "settlement_data_property holds the name of the property in the source data\nthat should be used as settlement data.\nIf it is set to \"prices.BTC.value\", then the Future will use the value of\nthis property as settlement data."
        },
        "tradingTerminationProperty": {
          "type": "string",
          "title": "the name of the property in the data source data that signals termination of trading"
        }
      },
      "title": "DataSourceSpecToFutureBinding describes which property of the data source data is to be\nused as settlement data and which to use as the trading terminated trigger"
    },
    "vegaDeposit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the deposit"
        },
        "status": {
          "$ref": "#/definitions/vegaDepositStatus",
          "title": "Status of the deposit"
        },
        "partyId": {
          "type": "string",
          "title": "Party identifier of the user initiating the deposit"
        },
        "asset": {
          "type": "string",
          "title": "The Vega asset targeted by this deposit"
        },
        "amount": {
          "type": "string",
          "description": "The amount to be deposited\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "txHash": {
          "type": "string",
          "title": "The hash of the transaction from the foreign chain"
        },
        "creditedTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the Vega account was updated with the deposit"
        },
        "createdTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the deposit was created on the Vega network"
        }
      },
      "title": "A deposit on to the Vega network"
    },
    "vegaDepositStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_OPEN",
        "STATUS_CANCELLED",
        "STATUS_FINALIZED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: Default value, always invalid\n - STATUS_OPEN: The deposit is being processed by the network\n - STATUS_CANCELLED: The deposit has been cancelled by the network\n - STATUS_FINALIZED: The deposit has been finalised and accounts have been updated",
      "title": "The status of the deposit"
    },
    "vegaDispatchMetric": {
      "type": "string",
      "enum": [
        "DISPATCH_METRIC_UNSPECIFIED",
        "DISPATCH_METRIC_MAKER_FEES_PAID",
        "DISPATCH_METRIC_MAKER_FEES_RECEIVED",
        "DISPATCH_METRIC_LP_FEES_RECEIVED",
        "DISPATCH_METRIC_MARKET_VALUE"
      ],
      "default": "DISPATCH_METRIC_UNSPECIFIED",
      "title": "- DISPATCH_METRIC_MAKER_FEES_PAID: Dispatch metric that is using the total maker fees paid in the market\n - DISPATCH_METRIC_MAKER_FEES_RECEIVED: Dispatch metric that is using the total maker fees received in the market\n - DISPATCH_METRIC_LP_FEES_RECEIVED: Dispatch metric that is using the total LP fees received in the market\n - DISPATCH_METRIC_MARKET_VALUE: Dispatch metric that is using total value of the market if above the required threshold and not paid given proposer bonus yet"
    },
    "vegaDispatchStrategy": {
      "type": "object",
      "properties": {
        "assetForMetric": {
          "type": "string",
          "title": "The asset to use for metric"
        },
        "metric": {
          "$ref": "#/definitions/vegaDispatchMetric",
          "title": "The metric to apply"
        },
        "markets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional markets in scope"
        }
      }
    },
    "vegaERC20": {
      "type": "object",
      "properties": {
        "contractAddress": {
          "type": "string",
          "title": "The address of the contract for the token, on the ethereum network"
        },
        "lifetimeLimit": {
          "type": "string",
          "title": "The lifetime limits deposit per address\nnote: this is a temporary measure that can be changed by governance"
        },
        "withdrawThreshold": {
          "type": "string",
          "title": "The maximum you can withdraw instantly. All withdrawals over the threshold will be delayed by the withdrawal delay.\nThere’s no limit on the size of a withdrawal\nnote: this is a temporary measure that can be changed by governance"
        }
      },
      "title": "An ERC20 token based asset, living on the ethereum network"
    },
    "vegaERC20Update": {
      "type": "object",
      "properties": {
        "lifetimeLimit": {
          "type": "string",
          "title": "The lifetime limits deposit per address.\nThis will be interpreted against the asset decimals.\nnote: this is a temporary measure that can be changed by governance"
        },
        "withdrawThreshold": {
          "type": "string",
          "title": "The maximum you can withdraw instantly. All withdrawals over the threshold will be delayed by the withdrawal delay.\nThere’s no limit on the size of a withdrawal\nnote: this is a temporary measure that can be changed by governance"
        }
      }
    },
    "vegaEpochAction": {
      "type": "string",
      "enum": [
        "EPOCH_ACTION_UNSPECIFIED",
        "EPOCH_ACTION_START",
        "EPOCH_ACTION_END"
      ],
      "default": "EPOCH_ACTION_UNSPECIFIED",
      "description": "- EPOCH_ACTION_START: The epoch update is for a new epoch\n - EPOCH_ACTION_END: The epoch update is for the end of an epoch",
      "title": "What epoch action has occurred"
    },
    "vegaErc20WithdrawExt": {
      "type": "object",
      "properties": {
        "receiverAddress": {
          "type": "string",
          "title": "The address into which the bridge will release the funds"
        }
      },
      "title": "An extension of data required for the withdraw submissions"
    },
    "vegaExternalDataSourceSpec": {
      "type": "object",
      "properties": {
        "spec": {
          "$ref": "#/definitions/vegaDataSourceSpec"
        }
      }
    },
    "vegaFee": {
      "type": "object",
      "properties": {
        "makerFee": {
          "type": "string",
          "description": "Fee amount paid to the non-aggressive party of the trade\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "infrastructureFee": {
          "type": "string",
          "description": "Fee amount paid for maintaining the Vega infrastructure\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "liquidityFee": {
          "type": "string",
          "description": "Fee amount paid to market makers\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        }
      },
      "title": "Represents any fees paid by a party, resulting from a trade"
    },
    "vegaFeeFactors": {
      "type": "object",
      "properties": {
        "makerFee": {
          "type": "string",
          "title": "Maker fee"
        },
        "infrastructureFee": {
          "type": "string",
          "title": "Infrastructure fee"
        },
        "liquidityFee": {
          "type": "string",
          "title": "Liquidity fee"
        }
      },
      "title": "Fee factors definition"
    },
    "vegaFees": {
      "type": "object",
      "properties": {
        "factors": {
          "$ref": "#/definitions/vegaFeeFactors",
          "title": "Fee factors"
        }
      },
      "title": "Fees definition"
    },
    "vegaFuture": {
      "type": "object",
      "properties": {
        "settlementAsset": {
          "type": "string",
          "title": "The asset for the future"
        },
        "quoteName": {
          "type": "string",
          "title": "Quote name of the instrument"
        },
        "dataSourceSpecForSettlementData": {
          "$ref": "#/definitions/vegaDataSourceSpec",
          "title": "The data source specification that describes the settlement data source filter"
        },
        "dataSourceSpecForTradingTermination": {
          "$ref": "#/definitions/vegaDataSourceSpec",
          "title": "The data source specification that describes the trading termination data source filter"
        },
        "dataSourceSpecBinding": {
          "$ref": "#/definitions/vegaDataSourceSpecToFutureBinding",
          "title": "The binding between the data spec and the data source"
        }
      },
      "title": "Future product definition"
    },
    "vegaFutureProduct": {
      "type": "object",
      "properties": {
        "settlementAsset": {
          "type": "string",
          "title": "Asset ID for the product's settlement asset"
        },
        "quoteName": {
          "type": "string",
          "title": "Product quote name"
        },
        "dataSourceSpecForSettlementData": {
          "$ref": "#/definitions/vegaDataSourceDefinition",
          "title": "The data source spec describing the data source for settlement"
        },
        "dataSourceSpecForTradingTermination": {
          "$ref": "#/definitions/vegaDataSourceDefinition",
          "title": "The external data source spec describing the data source of trading termination"
        },
        "dataSourceSpecBinding": {
          "$ref": "#/definitions/vegaDataSourceSpecToFutureBinding",
          "title": "The binding between the data source spec and the settlement data"
        }
      },
      "title": "Future product configuration"
    },
    "vegaInstrument": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Instrument identifier"
        },
        "code": {
          "type": "string",
          "title": "Code for the instrument"
        },
        "name": {
          "type": "string",
          "title": "Name of the instrument"
        },
        "metadata": {
          "$ref": "#/definitions/vegaInstrumentMetadata",
          "title": "A collection of instrument meta-data"
        },
        "future": {
          "$ref": "#/definitions/vegaFuture",
          "title": "Future"
        }
      },
      "title": "Instrument definition"
    },
    "vegaInstrumentConfiguration": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Instrument name"
        },
        "code": {
          "type": "string",
          "title": "Instrument code, human-readable shortcode used to describe the instrument"
        },
        "future": {
          "$ref": "#/definitions/vegaFutureProduct",
          "title": "Future"
        }
      },
      "title": "Instrument configuration"
    },
    "vegaInstrumentMetadata": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "A list of 0 or more tags"
        }
      },
      "title": "Instrument metadata definition"
    },
    "vegaLedgerEntry": {
      "type": "object",
      "properties": {
        "fromAccount": {
          "$ref": "#/definitions/vegaAccountDetails",
          "title": "One or more accounts to transfer from"
        },
        "toAccount": {
          "$ref": "#/definitions/vegaAccountDetails",
          "title": "One or more accounts to transfer to"
        },
        "amount": {
          "type": "string",
          "description": "An amount to transfer\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "type": {
          "$ref": "#/definitions/vegaTransferType",
          "title": "Transfer type for this entry"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamps"
        },
        "fromAccountBalance": {
          "type": "string",
          "title": "Sender account balance after the transfer"
        },
        "toAccountBalance": {
          "type": "string",
          "title": "Receiver account balance after the transfer"
        }
      },
      "title": "Represents a ledger entry on Vega"
    },
    "vegaLedgerMovement": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLedgerEntry"
          }
        },
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPostTransferBalance"
          }
        }
      }
    },
    "vegaLiquidityMonitoringParameters": {
      "type": "object",
      "properties": {
        "targetStakeParameters": {
          "$ref": "#/definitions/vegaTargetStakeParameters",
          "title": "Specifies parameters related to target stake calculation"
        },
        "triggeringRatio": {
          "type": "string",
          "title": "Specifies the triggering ratio for entering liquidity auction"
        },
        "auctionExtension": {
          "type": "string",
          "format": "int64",
          "title": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction"
        }
      },
      "title": "LiquidityMonitoringParameters contains settings used for liquidity monitoring"
    },
    "vegaLiquidityOrder": {
      "type": "object",
      "properties": {
        "reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "The pegged reference point for the order"
        },
        "proportion": {
          "type": "integer",
          "format": "int64",
          "title": "The relative proportion of the commitment to be allocated at a price level"
        },
        "offset": {
          "type": "string",
          "description": "The offset/amount of units away for the order\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        }
      },
      "title": "Represents a liquidity order"
    },
    "vegaLiquidityOrderReference": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "title": "Unique identifier of the pegged order generated by the core to fulfil this liquidity order"
        },
        "liquidityOrder": {
          "$ref": "#/definitions/vegaLiquidityOrder",
          "title": "The liquidity order from the original submission"
        }
      },
      "title": "A pair of a liquidity order and the ID of the generated order by the core"
    },
    "vegaLiquidityProviderFeeShare": {
      "type": "object",
      "properties": {
        "party": {
          "type": "string",
          "title": "The liquidity provider party id"
        },
        "equityLikeShare": {
          "type": "string",
          "title": "The share own by this liquidity provider (float)"
        },
        "averageEntryValuation": {
          "type": "string",
          "title": "The average entry valuation of the liquidity provider for the market"
        },
        "averageScore": {
          "type": "string",
          "title": "The average liquidity score"
        }
      },
      "title": "The equity like share of liquidity fee for each liquidity provider"
    },
    "vegaLiquidityProvision": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier"
        },
        "partyId": {
          "type": "string",
          "title": "Unique party identifier for the creator of the provision"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order was created at, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order was updated at, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "marketId": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        },
        "commitmentAmount": {
          "type": "string",
          "description": "Specified as a unitless number that represents the amount of settlement asset of the market\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "fee": {
          "type": "string",
          "title": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per setting fees and rewarding liquidity providers"
        },
        "sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrderReference"
          },
          "title": "A set of liquidity sell orders to meet the liquidity provision obligation"
        },
        "buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrderReference"
          },
          "title": "A set of liquidity buy orders to meet the liquidity provision obligation"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "Version of this liquidity provision order"
        },
        "status": {
          "$ref": "#/definitions/vegaLiquidityProvisionStatus",
          "title": "Status of this liquidity provision order"
        },
        "reference": {
          "type": "string",
          "title": "A reference shared between this liquidity provision and all its orders"
        }
      },
      "title": "An Liquidity provider commitment"
    },
    "vegaLiquidityProvisionStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_ACTIVE",
        "STATUS_STOPPED",
        "STATUS_CANCELLED",
        "STATUS_REJECTED",
        "STATUS_UNDEPLOYED",
        "STATUS_PENDING"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: The default value\n - STATUS_ACTIVE: The liquidity provision is active\n - STATUS_STOPPED: The liquidity provision was stopped by the network\n - STATUS_CANCELLED: The liquidity provision was cancelled by the liquidity provider\n - STATUS_REJECTED: The liquidity provision was invalid and got rejected\n - STATUS_UNDEPLOYED: The liquidity provision is valid and accepted by network, but orders aren't deployed\n - STATUS_PENDING: The liquidity provision is valid and accepted by network\nbut has never been deployed. If when it's possible to deploy the orders for the first time\nmargin check fails, then they will be cancelled without any penalties.",
      "title": "Status of a liquidity provision order"
    },
    "vegaLogNormalModelParams": {
      "type": "object",
      "properties": {
        "mu": {
          "type": "number",
          "format": "double",
          "title": "Mu parameter, annualised growth rate of the underlying asset"
        },
        "r": {
          "type": "number",
          "format": "double",
          "title": "R parameter, annualised growth rate of the risk-free asset, used for discounting of future cash flows, can be any real number"
        },
        "sigma": {
          "type": "number",
          "format": "double",
          "title": "Sigma parameter, annualised volatility of the underlying asset, must be a strictly non-negative real number"
        }
      },
      "title": "Risk model parameters for log normal"
    },
    "vegaLogNormalRiskModel": {
      "type": "object",
      "properties": {
        "riskAversionParameter": {
          "type": "number",
          "format": "double",
          "title": "Risk Aversion Parameter"
        },
        "tau": {
          "type": "number",
          "format": "double",
          "title": "Tau parameter of the risk model, projection horizon measured as a year fraction used in the expected shortfall calculation to obtain the maintenance margin, must be a strictly non-negative real number"
        },
        "params": {
          "$ref": "#/definitions/vegaLogNormalModelParams",
          "title": "Risk model parameters for log normal"
        }
      },
      "title": "Risk model for log normal"
    },
    "vegaMarginCalculator": {
      "type": "object",
      "properties": {
        "scalingFactors": {
          "$ref": "#/definitions/vegaScalingFactors",
          "title": "Scaling factors for margin calculation"
        }
      },
      "title": "Margin Calculator definition"
    },
    "vegaMarginLevels": {
      "type": "object",
      "properties": {
        "maintenanceMargin": {
          "type": "string",
          "description": "Maintenance margin value\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "searchLevel": {
          "type": "string",
          "description": "Margin search level value\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "initialMargin": {
          "type": "string",
          "description": "Initial margin value\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "collateralReleaseLevel": {
          "type": "string",
          "description": "Collateral release level value\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "partyId": {
          "type": "string",
          "title": "Party identifier"
        },
        "marketId": {
          "type": "string",
          "title": "Market identifier"
        },
        "asset": {
          "type": "string",
          "title": "Asset identifier"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for the time the ledger entry was created, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        }
      },
      "title": "Represents the margin levels for a party on a market at a given time"
    },
    "vegaMarket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier"
        },
        "tradableInstrument": {
          "$ref": "#/definitions/vegaTradableInstrument",
          "title": "Tradable instrument configuration"
        },
        "decimalPlaces": {
          "type": "string",
          "format": "uint64",
          "title": "Number of decimal places that a price must be shifted by in order to get a\ncorrect price denominated in the currency of the market, for example:\n`realPrice = price / 10^decimalPlaces`"
        },
        "fees": {
          "$ref": "#/definitions/vegaFees",
          "title": "Fees configuration"
        },
        "openingAuction": {
          "$ref": "#/definitions/vegaAuctionDuration",
          "title": "Auction duration specifies how long the opening auction will run (minimum\nduration and optionally a minimum traded volume)"
        },
        "priceMonitoringSettings": {
          "$ref": "#/definitions/vegaPriceMonitoringSettings",
          "title": "PriceMonitoringSettings for the market"
        },
        "liquidityMonitoringParameters": {
          "$ref": "#/definitions/vegaLiquidityMonitoringParameters",
          "title": "LiquidityMonitoringParameters for the market"
        },
        "tradingMode": {
          "$ref": "#/definitions/MarketTradingMode",
          "title": "Current mode of execution of the market"
        },
        "state": {
          "$ref": "#/definitions/vegaMarketState",
          "title": "Current state of the market"
        },
        "marketTimestamps": {
          "$ref": "#/definitions/vegaMarketTimestamps",
          "title": "Timestamps for when the market state changes"
        },
        "positionDecimalPlaces": {
          "type": "string",
          "format": "int64",
          "title": "The number of decimal places for a position"
        },
        "lpPriceRange": {
          "type": "string",
          "title": "Percentage move up and down from the mid price which specifies the range of \nprice levels over which automated liquidity provision orders will be deployed"
        },
        "linearSlippageFactor": {
          "type": "string",
          "title": "Linear slippage factor is used to cap the slippage component of maintainence margin - it is applied to the slippage volume"
        },
        "quadraticSlippageFactor": {
          "type": "string",
          "title": "Quadratic slippage factor is used to cap the slippage component of maintainence margin - it is applied to the square of the slippage volume"
        }
      },
      "title": "Market definition"
    },
    "vegaMarketData": {
      "type": "object",
      "properties": {
        "markPrice": {
          "type": "string",
          "description": "Mark price, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "bestBidPrice": {
          "type": "string",
          "description": "Highest price level on an order book for buy orders, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "bestBidVolume": {
          "type": "string",
          "format": "uint64",
          "description": "Aggregated volume being bid at the best bid price\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places."
        },
        "bestOfferPrice": {
          "type": "string",
          "description": "Lowest price level on an order book for offer orders\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "bestOfferVolume": {
          "type": "string",
          "format": "uint64",
          "description": "Aggregated volume being offered at the best offer price, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places."
        },
        "bestStaticBidPrice": {
          "type": "string",
          "description": "Highest price on the order book for buy orders not including pegged orders\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "bestStaticBidVolume": {
          "type": "string",
          "format": "uint64",
          "description": "Total volume at the best static bid price excluding pegged orders\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places."
        },
        "bestStaticOfferPrice": {
          "type": "string",
          "description": "Lowest price on the order book for sell orders not including pegged orders\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "bestStaticOfferVolume": {
          "type": "string",
          "format": "uint64",
          "description": "Total volume at the best static offer price, excluding pegged orders\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places."
        },
        "midPrice": {
          "type": "string",
          "description": "Arithmetic average of the best bid price and best offer price, as an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "staticMidPrice": {
          "type": "string",
          "description": "Arithmetic average of the best static bid price and best static offer price\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "market": {
          "type": "string",
          "title": "Market identifier for the data"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp at which this mark price was relevant, in nanoseconds since the epoch"
        },
        "openInterest": {
          "type": "string",
          "format": "uint64",
          "description": "The sum of the size of all positions greater than zero on the market\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places."
        },
        "auctionEnd": {
          "type": "string",
          "format": "int64",
          "title": "Time in seconds until the end of the auction (zero if currently not in auction period)"
        },
        "auctionStart": {
          "type": "string",
          "format": "int64",
          "title": "Time until next auction, or start time of the current auction if market is in auction period"
        },
        "indicativePrice": {
          "type": "string",
          "description": "Indicative price (zero if not in auction)\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "indicativeVolume": {
          "type": "string",
          "format": "uint64",
          "description": "Indicative volume (zero if not in auction)\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places."
        },
        "marketTradingMode": {
          "$ref": "#/definitions/MarketTradingMode",
          "title": "The current trading mode for the market"
        },
        "trigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "When a market is in an auction trading mode, this field indicates what triggered the auction"
        },
        "extensionTrigger": {
          "$ref": "#/definitions/vegaAuctionTrigger",
          "title": "When a market auction is extended, this field indicates what caused the extension"
        },
        "targetStake": {
          "type": "string",
          "description": "Targeted stake for the given market\nThis field is an unsigned integer passed as a string and needs to be scaled using the settlement asset's decimal places."
        },
        "suppliedStake": {
          "type": "string",
          "description": "Available stake for the given market\nThis field is an unsigned integer passed as a string and needs to be scaled using the settlement asset's decimal places."
        },
        "priceMonitoringBounds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceMonitoringBounds"
          },
          "title": "One or more price monitoring bounds for the current timestamp"
        },
        "marketValueProxy": {
          "type": "string",
          "title": "the market value proxy"
        },
        "liquidityProviderFeeShare": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityProviderFeeShare"
          },
          "title": "the equity like share of liquidity fee for each liquidity provider"
        },
        "marketState": {
          "$ref": "#/definitions/vegaMarketState",
          "title": "The current state of the market"
        },
        "nextMarkToMarket": {
          "type": "string",
          "format": "int64",
          "title": "next MTM timestamp"
        },
        "lastTradedPrice": {
          "type": "string",
          "description": "Last traded price of the market\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        }
      },
      "title": "Represents data generated by a market when open"
    },
    "vegaMarketState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_PROPOSED",
        "STATE_REJECTED",
        "STATE_PENDING",
        "STATE_CANCELLED",
        "STATE_ACTIVE",
        "STATE_SUSPENDED",
        "STATE_CLOSED",
        "STATE_TRADING_TERMINATED",
        "STATE_SETTLED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: Default value, invalid\n - STATE_PROPOSED: The governance proposal valid and accepted\n - STATE_REJECTED: Outcome of governance votes is to reject the market\n - STATE_PENDING: Governance vote passes/wins\n - STATE_CANCELLED: Market triggers cancellation condition or governance\nvotes to close before market becomes Active\n - STATE_ACTIVE: Enactment date reached and usual auction exit checks pass\n - STATE_SUSPENDED: Price monitoring or liquidity monitoring trigger\n - STATE_CLOSED: Governance vote to close (Not currently implemented)\n - STATE_TRADING_TERMINATED: Defined by the product (i.e. from a product parameter,\nspecified in market definition, giving close date/time)\n - STATE_SETTLED: Settlement triggered and completed as defined by product",
      "title": "The current state of the market"
    },
    "vegaMarketTimestamps": {
      "type": "object",
      "properties": {
        "proposed": {
          "type": "string",
          "format": "int64",
          "title": "Time when the market is first proposed"
        },
        "pending": {
          "type": "string",
          "format": "int64",
          "title": "Time when the market has been voted in and began its opening auction"
        },
        "open": {
          "type": "string",
          "format": "int64",
          "title": "Time when the market has left the opening auction and is ready to accept trades"
        },
        "close": {
          "type": "string",
          "format": "int64",
          "title": "Time when the market closed"
        }
      },
      "title": "Time stamps for important times about creating, enacting etc the market"
    },
    "vegaNetworkLimits": {
      "type": "object",
      "properties": {
        "canProposeMarket": {
          "type": "boolean",
          "title": "Are market proposals allowed at this point in time"
        },
        "canProposeAsset": {
          "type": "boolean",
          "title": "Are asset proposals allowed at this point in time"
        },
        "proposeMarketEnabled": {
          "type": "boolean",
          "title": "Are market proposals enabled on this chain"
        },
        "proposeAssetEnabled": {
          "type": "boolean",
          "title": "Are asset proposals enabled on this chain"
        },
        "genesisLoaded": {
          "type": "boolean",
          "title": "True once the genesis file is loaded"
        },
        "proposeMarketEnabledFrom": {
          "type": "string",
          "format": "int64",
          "title": "The date/timestamp in unix nanoseconds at which market proposals will be enabled (0 indicates not set)"
        },
        "proposeAssetEnabledFrom": {
          "type": "string",
          "format": "int64",
          "title": "The date/timestamp in unix nanoseconds at which asset proposals will be enabled (0 indicates not set)"
        }
      },
      "title": "Network limits, defined in the genesis file"
    },
    "vegaNetworkParameter": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "The unique key"
        },
        "value": {
          "type": "string",
          "title": "The value for the network parameter"
        }
      },
      "title": "Represents a network parameter on Vega"
    },
    "vegaNewAsset": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaAssetDetails",
          "title": "The configuration of the new asset"
        }
      },
      "title": "New asset on Vega"
    },
    "vegaNewFreeform": {
      "type": "object",
      "description": "Freeform proposal\nThis message is just used as a placeholder to sort out the nature of the\nproposal once parsed."
    },
    "vegaNewMarket": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNewMarketConfiguration",
          "title": "The configuration of the new market"
        }
      },
      "title": "New market on Vega"
    },
    "vegaNewMarketConfiguration": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrumentConfiguration",
          "title": "New market instrument configuration"
        },
        "decimalPlaces": {
          "type": "string",
          "format": "uint64",
          "title": "Decimal places used for the new market, sets the smallest price increment on the book"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional new market metadata, tags"
        },
        "priceMonitoringParameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "Price monitoring parameters"
        },
        "liquidityMonitoringParameters": {
          "$ref": "#/definitions/vegaLiquidityMonitoringParameters",
          "title": "Liquidity monitoring parameters"
        },
        "simple": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected"
        },
        "logNormal": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected"
        },
        "positionDecimalPlaces": {
          "type": "string",
          "format": "int64",
          "title": "Decimal places for order sizes, sets what size the smallest order / position on the market can be"
        },
        "lpPriceRange": {
          "type": "string",
          "title": "Percentage move up and down from the mid price which specifies the range of \nprice levels over which automated liquidity provision orders will be deployed"
        },
        "linearSlippageFactor": {
          "type": "string",
          "title": "Linear slippage factor is used to cap the slippage component of maintainence margin - it is applied to the slippage volume"
        },
        "quadraticSlippageFactor": {
          "type": "string",
          "title": "Quadratic slippage factor is used to cap the slippage component of maintainence margin - it is applied to the square of the slippage volume"
        }
      },
      "title": "Configuration for a new market on Vega"
    },
    "vegaOracleData": {
      "type": "object",
      "properties": {
        "externalData": {
          "$ref": "#/definitions/v1ExternalData"
        }
      }
    },
    "vegaOracleSpec": {
      "type": "object",
      "properties": {
        "externalDataSourceSpec": {
          "$ref": "#/definitions/vegaExternalDataSourceSpec"
        }
      },
      "title": "An oracle spec contains an embedded external data source spec.\nIt will be generated by the compiler as: OracleSpec_ExternalDataSourceSpec_*"
    },
    "vegaOrder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the order (set by the system after consensus)"
        },
        "marketId": {
          "type": "string",
          "title": "Market identifier for the order"
        },
        "partyId": {
          "type": "string",
          "title": "Party identifier for the order"
        },
        "side": {
          "$ref": "#/definitions/vegaSide",
          "title": "Side for the order, e.g. SIDE_BUY or SIDE_SELL"
        },
        "price": {
          "type": "string",
          "description": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "description": "Size for the order, for example, in a futures market the size equals the number of contracts\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places."
        },
        "remaining": {
          "type": "string",
          "format": "uint64",
          "description": "Size remaining, when this reaches 0 then the order is fully filled and status becomes STATUS_FILLED\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places."
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Time in force indicates how long an order will remain active before it is executed or expires.\n- See OrderTimeInForce"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType",
          "title": "Type for the order - See OrderType"
        },
        "createdAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order was created at, in nanoseconds since the epoch"
        },
        "status": {
          "$ref": "#/definitions/vegaOrderStatus",
          "title": "The current status for the order.\n- For detail on `STATUS_REJECTED` please check the OrderError value given in the `reason` field"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order will expire, in nanoseconds since the epoch"
        },
        "reference": {
          "type": "string",
          "title": "Reference given for the order, this is typically used to retrieve an order submitted through consensus\n- Currently set internally by the node to return a unique reference identifier for the order submission"
        },
        "reason": {
          "$ref": "#/definitions/vegaOrderError",
          "title": "If the Order `status` is `STATUS_REJECTED` then an OrderError reason will be specified\n- The default for this field is `ORDER_ERROR_NONE` which signifies that there were no errors"
        },
        "updatedAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order was last updated, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "The version for the order, initial value is version 1 and is incremented after each successful amend"
        },
        "batchId": {
          "type": "string",
          "format": "uint64",
          "title": "Batch identifier for the order, used internally for orders submitted during auctions\nto keep track of the auction batch this order falls under (required for fees calculation)"
        },
        "peggedOrder": {
          "$ref": "#/definitions/vegaPeggedOrder",
          "description": "Pegged order details, used only if the order represents a pegged order."
        },
        "liquidityProvisionId": {
          "type": "string",
          "description": "Is this order created as part of a liquidity provision, will be empty if not."
        }
      },
      "title": "An order can be submitted, amended and cancelled on Vega in an attempt to make trades with other parties"
    },
    "vegaOrderError": {
      "type": "string",
      "enum": [
        "ORDER_ERROR_UNSPECIFIED",
        "ORDER_ERROR_INVALID_MARKET_ID",
        "ORDER_ERROR_INVALID_ORDER_ID",
        "ORDER_ERROR_OUT_OF_SEQUENCE",
        "ORDER_ERROR_INVALID_REMAINING_SIZE",
        "ORDER_ERROR_TIME_FAILURE",
        "ORDER_ERROR_REMOVAL_FAILURE",
        "ORDER_ERROR_INVALID_EXPIRATION_DATETIME",
        "ORDER_ERROR_INVALID_ORDER_REFERENCE",
        "ORDER_ERROR_EDIT_NOT_ALLOWED",
        "ORDER_ERROR_AMEND_FAILURE",
        "ORDER_ERROR_NOT_FOUND",
        "ORDER_ERROR_INVALID_PARTY_ID",
        "ORDER_ERROR_MARKET_CLOSED",
        "ORDER_ERROR_MARGIN_CHECK_FAILED",
        "ORDER_ERROR_MISSING_GENERAL_ACCOUNT",
        "ORDER_ERROR_INTERNAL_ERROR",
        "ORDER_ERROR_INVALID_SIZE",
        "ORDER_ERROR_INVALID_PERSISTENCE",
        "ORDER_ERROR_INVALID_TYPE",
        "ORDER_ERROR_SELF_TRADING",
        "ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES",
        "ORDER_ERROR_INCORRECT_MARKET_TYPE",
        "ORDER_ERROR_INVALID_TIME_IN_FORCE",
        "ORDER_ERROR_CANNOT_SEND_GFN_ORDER_DURING_AN_AUCTION",
        "ORDER_ERROR_CANNOT_SEND_GFA_ORDER_DURING_CONTINUOUS_TRADING",
        "ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT",
        "ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT",
        "ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT",
        "ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC",
        "ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN",
        "ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN",
        "ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION",
        "ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION",
        "ORDER_ERROR_MUST_BE_LIMIT_ORDER",
        "ORDER_ERROR_MUST_BE_GTT_OR_GTC",
        "ORDER_ERROR_WITHOUT_REFERENCE_PRICE",
        "ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE",
        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO",
        "ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE",
        "ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO",
        "ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE",
        "ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER",
        "ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER",
        "ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER",
        "ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS",
        "ORDER_ERROR_TOO_MANY_PEGGED_ORDERS"
      ],
      "default": "ORDER_ERROR_UNSPECIFIED",
      "description": "- ORDER_ERROR_UNSPECIFIED: Default value, no error reported\n - ORDER_ERROR_INVALID_MARKET_ID: Order was submitted for a market that does not exist\n - ORDER_ERROR_INVALID_ORDER_ID: Order was submitted with an invalid identifier\n - ORDER_ERROR_OUT_OF_SEQUENCE: Order was amended with a sequence number that was not previous version + 1\n - ORDER_ERROR_INVALID_REMAINING_SIZE: Order was amended with an invalid remaining size (e.g. remaining greater than total size)\n - ORDER_ERROR_TIME_FAILURE: Node was unable to get Vega (blockchain) time\n - ORDER_ERROR_REMOVAL_FAILURE: Failed to remove an order from the book\n - ORDER_ERROR_INVALID_EXPIRATION_DATETIME: An order with `TimeInForce.TIME_IN_FORCE_GTT` was submitted or amended\nwith an expiration that was badly formatted or otherwise invalid\n - ORDER_ERROR_INVALID_ORDER_REFERENCE: Order was submitted or amended with an invalid reference field\n - ORDER_ERROR_EDIT_NOT_ALLOWED: Order amend was submitted for an order field that cannot not be amended (e.g. order identifier)\n - ORDER_ERROR_AMEND_FAILURE: Amend failure because amend details do not match original order\n - ORDER_ERROR_NOT_FOUND: Order not found in an order book or store\n - ORDER_ERROR_INVALID_PARTY_ID: Order was submitted with an invalid or missing party identifier\n - ORDER_ERROR_MARKET_CLOSED: Order was submitted for a market that has closed\n - ORDER_ERROR_MARGIN_CHECK_FAILED: Order was submitted, but the party did not have enough collateral to cover the order\n - ORDER_ERROR_MISSING_GENERAL_ACCOUNT: Order was submitted, but the party did not have an account for this asset\n - ORDER_ERROR_INTERNAL_ERROR: Unspecified internal error\n - ORDER_ERROR_INVALID_SIZE: Order was submitted with an invalid or missing size (e.g. 0)\n - ORDER_ERROR_INVALID_PERSISTENCE: Order was submitted with an invalid persistence for its type\n - ORDER_ERROR_INVALID_TYPE: Order was submitted with an invalid type field\n - ORDER_ERROR_SELF_TRADING: Order was stopped as it would have traded with another order submitted from the same party\n - ORDER_ERROR_INSUFFICIENT_FUNDS_TO_PAY_FEES: Order was submitted, but the party did not have enough collateral to cover the fees for the order\n - ORDER_ERROR_INCORRECT_MARKET_TYPE: Order was submitted with an incorrect or invalid market type\n - ORDER_ERROR_INVALID_TIME_IN_FORCE: Order was submitted with invalid time in force\n - ORDER_ERROR_CANNOT_SEND_GFN_ORDER_DURING_AN_AUCTION: A GFN order has got to the market when it is in auction mode\n - ORDER_ERROR_CANNOT_SEND_GFA_ORDER_DURING_CONTINUOUS_TRADING: A GFA order has got to the market when it is in continuous trading mode\n - ORDER_ERROR_CANNOT_AMEND_TO_GTT_WITHOUT_EXPIRYAT: Attempt to amend order to GTT without ExpiryAt\n - ORDER_ERROR_EXPIRYAT_BEFORE_CREATEDAT: Attempt to amend ExpiryAt to a value before CreatedAt\n - ORDER_ERROR_CANNOT_HAVE_GTC_AND_EXPIRYAT: Attempt to amend to GTC without an ExpiryAt value\n - ORDER_ERROR_CANNOT_AMEND_TO_FOK_OR_IOC: Amending to FOK or IOC is invalid\n - ORDER_ERROR_CANNOT_AMEND_TO_GFA_OR_GFN: Amending to GFA or GFN is invalid\n - ORDER_ERROR_CANNOT_AMEND_FROM_GFA_OR_GFN: Amending from GFA or GFN is invalid\n - ORDER_ERROR_CANNOT_SEND_IOC_ORDER_DURING_AUCTION: IOC orders are not allowed during auction\n - ORDER_ERROR_CANNOT_SEND_FOK_ORDER_DURING_AUCTION: FOK orders are not allowed during auction\n - ORDER_ERROR_MUST_BE_LIMIT_ORDER: Pegged orders must be LIMIT orders\n - ORDER_ERROR_MUST_BE_GTT_OR_GTC: Pegged orders can only have TIF GTC or GTT\n - ORDER_ERROR_WITHOUT_REFERENCE_PRICE: Pegged order must have a reference price\n - ORDER_ERROR_BUY_CANNOT_REFERENCE_BEST_ASK_PRICE: Buy pegged order cannot reference best ask price\n - ORDER_ERROR_OFFSET_MUST_BE_GREATER_OR_EQUAL_TO_ZERO: Pegged order offset must be \u003e= 0\n - ORDER_ERROR_SELL_CANNOT_REFERENCE_BEST_BID_PRICE: Sell pegged order cannot reference best bid price\n - ORDER_ERROR_OFFSET_MUST_BE_GREATER_THAN_ZERO: Pegged order offset must be \u003e zero\n - ORDER_ERROR_INSUFFICIENT_ASSET_BALANCE: The party has an insufficient balance, or does not have\na general account to submit the order (no deposits made\nfor the required asset)\n - ORDER_ERROR_CANNOT_AMEND_PEGGED_ORDER_DETAILS_ON_NON_PEGGED_ORDER: Cannot amend details of a non pegged details\n - ORDER_ERROR_UNABLE_TO_REPRICE_PEGGED_ORDER: Could not re-price a pegged order because a market price is unavailable\n - ORDER_ERROR_UNABLE_TO_AMEND_PRICE_ON_PEGGED_ORDER: It is not possible to amend the price of an existing pegged order\n - ORDER_ERROR_NON_PERSISTENT_ORDER_OUT_OF_PRICE_BOUNDS: An FOK, IOC, or GFN order was rejected because it resulted in trades outside the price bounds\n - ORDER_ERROR_TOO_MANY_PEGGED_ORDERS: Unable to submit pegged order, temporarily too many pegged orders across all markets",
      "title": "OrderError codes are returned in the `[Order](#vega.Order).reason` field - If there is an issue\nwith an order during its life-cycle, it will be marked with `status.ORDER_STATUS_REJECTED`"
    },
    "vegaOrderStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_ACTIVE",
        "STATUS_EXPIRED",
        "STATUS_CANCELLED",
        "STATUS_STOPPED",
        "STATUS_FILLED",
        "STATUS_REJECTED",
        "STATUS_PARTIALLY_FILLED",
        "STATUS_PARKED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: Default value, always invalid\n - STATUS_ACTIVE: Used for active unfilled or partially filled orders\n - STATUS_EXPIRED: Used for expired GTT orders\n - STATUS_CANCELLED: Used for orders cancelled by the party that created the order\n - STATUS_STOPPED: Used for unfilled FOK or IOC orders, and for orders that were stopped by the network\n - STATUS_FILLED: Used for closed fully filled orders\n - STATUS_REJECTED: Used for orders when not enough collateral was available to fill the margin requirements\n - STATUS_PARTIALLY_FILLED: Used for closed partially filled IOC orders\n - STATUS_PARKED: Order has been removed from the order book and has been parked, this applies to pegged orders only",
      "title": "Status values for an order"
    },
    "vegaOrderType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_LIMIT",
        "TYPE_MARKET",
        "TYPE_NETWORK"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: Default value, always invalid\n - TYPE_LIMIT: Used for Limit orders\n - TYPE_MARKET: Used for Market orders\n - TYPE_NETWORK: Used for orders where the initiating party is the network (with distressed parties)",
      "title": "Type values for an order"
    },
    "vegaParty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "A unique identifier for the party, typically represented by a public key"
        }
      },
      "title": "A party represents an entity who wishes to trade on or query a Vega network"
    },
    "vegaPeggedOrder": {
      "type": "object",
      "properties": {
        "reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "The price point the order is linked to"
        },
        "offset": {
          "type": "string",
          "title": "Offset from the price reference"
        }
      },
      "title": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET\nThey can be used for any limit order that is valid during continuous trading"
    },
    "vegaPeggedReference": {
      "type": "string",
      "enum": [
        "PEGGED_REFERENCE_UNSPECIFIED",
        "PEGGED_REFERENCE_MID",
        "PEGGED_REFERENCE_BEST_BID",
        "PEGGED_REFERENCE_BEST_ASK"
      ],
      "default": "PEGGED_REFERENCE_UNSPECIFIED",
      "description": "- PEGGED_REFERENCE_UNSPECIFIED: Default value for PeggedReference, no reference given\n - PEGGED_REFERENCE_MID: Mid price reference\n - PEGGED_REFERENCE_BEST_BID: Best bid price reference\n - PEGGED_REFERENCE_BEST_ASK: Best ask price reference",
      "title": "A pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
    },
    "vegaPostTransferBalance": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/vegaAccountDetails",
          "title": "The account relating to the transfer"
        },
        "balance": {
          "type": "string",
          "description": "The balance relating to the transfer\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        }
      },
      "title": "Represents the balance for an account during a transfer"
    },
    "vegaPriceMonitoringBounds": {
      "type": "object",
      "properties": {
        "minValidPrice": {
          "type": "string",
          "description": "Minimum price that isn't currently breaching the specified price monitoring trigger\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "maxValidPrice": {
          "type": "string",
          "description": "Maximum price that isn't currently breaching the specified price monitoring trigger\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "trigger": {
          "$ref": "#/definitions/vegaPriceMonitoringTrigger",
          "title": "Price monitoring trigger associated with the bounds"
        },
        "referencePrice": {
          "type": "string",
          "description": "Reference price used to calculate the valid price range\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        }
      },
      "title": "Represents a list of valid (at the current timestamp) price ranges per associated trigger"
    },
    "vegaPriceMonitoringParameters": {
      "type": "object",
      "properties": {
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceMonitoringTrigger"
          }
        }
      },
      "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
    },
    "vegaPriceMonitoringSettings": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "Specifies price monitoring parameters to be used for price monitoring purposes"
        }
      },
      "title": "PriceMonitoringSettings contains the settings for price monitoring"
    },
    "vegaPriceMonitoringTrigger": {
      "type": "object",
      "properties": {
        "horizon": {
          "type": "string",
          "format": "int64",
          "title": "Price monitoring projection horizon τ in seconds"
        },
        "probability": {
          "type": "string",
          "title": "Price monitoring probability level p"
        },
        "auctionExtension": {
          "type": "string",
          "format": "int64",
          "title": "Price monitoring auction extension duration in seconds should the price\nbreach its theoretical level over the specified horizon at the specified\nprobability level"
        }
      },
      "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
    },
    "vegaProposal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique proposal identifier"
        },
        "reference": {
          "type": "string",
          "title": "Proposal reference"
        },
        "partyId": {
          "type": "string",
          "title": "Party identifier (public key) of the author (the party submitting the proposal)"
        },
        "state": {
          "$ref": "#/definitions/vegaProposalState",
          "title": "Proposal state - See (Proposal.State)[#vega.Proposal.State] definition"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Proposal timestamp for date and time (in nanoseconds) when proposal was submitted to the network"
        },
        "terms": {
          "$ref": "#/definitions/vegaProposalTerms",
          "title": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted"
        },
        "reason": {
          "$ref": "#/definitions/vegaProposalError",
          "title": "A reason for the current state of the proposal, this may be set in case of REJECTED and FAILED statuses"
        },
        "errorDetails": {
          "type": "string",
          "title": "The detailed error associated to the reason"
        },
        "rationale": {
          "$ref": "#/definitions/vegaProposalRationale",
          "title": "The rationale behind a proposal"
        },
        "requiredParticipation": {
          "type": "string",
          "title": "The required vote participation for this proposal"
        },
        "requiredMajority": {
          "type": "string",
          "title": "The required majority for this proposal"
        },
        "requiredLiquidityProviderParticipation": {
          "type": "string",
          "title": "The required participation from liquidity providers, optional (required for market update proposal)"
        },
        "requiredLiquidityProviderMajority": {
          "type": "string",
          "title": "The require majority from liquidity providers, optional (required for market update proposal)"
        }
      },
      "title": "Governance proposal"
    },
    "vegaProposalError": {
      "type": "string",
      "enum": [
        "PROPOSAL_ERROR_UNSPECIFIED",
        "PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON",
        "PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE",
        "PROPOSAL_ERROR_ENACT_TIME_TOO_SOON",
        "PROPOSAL_ERROR_ENACT_TIME_TOO_LATE",
        "PROPOSAL_ERROR_INSUFFICIENT_TOKENS",
        "PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY",
        "PROPOSAL_ERROR_NO_PRODUCT",
        "PROPOSAL_ERROR_UNSUPPORTED_PRODUCT",
        "PROPOSAL_ERROR_NO_TRADING_MODE",
        "PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE",
        "PROPOSAL_ERROR_NODE_VALIDATION_FAILED",
        "PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD",
        "PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS",
        "PROPOSAL_ERROR_INVALID_ASSET",
        "PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS",
        "PROPOSAL_ERROR_NO_RISK_PARAMETERS",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE",
        "PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED",
        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL",
        "PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE",
        "PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET",
        "PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT",
        "PROPOSAL_ERROR_INVALID_RISK_PARAMETER",
        "PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED",
        "PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED",
        "PROPOSAL_ERROR_INVALID_ASSET_DETAILS",
        "PROPOSAL_ERROR_UNKNOWN_TYPE",
        "PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE",
        "PROPOSAL_ERROR_INVALID_FREEFORM",
        "PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE",
        "PROPOSAL_ERROR_INVALID_MARKET",
        "PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES",
        "PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS",
        "PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE",
        "PROPOSAL_ERROR_LP_PRICE_RANGE_NONPOSITIVE",
        "PROPOSAL_ERROR_LP_PRICE_RANGE_TOO_LARGE",
        "PROPOSAL_ERROR_LINEAR_SLIPPAGE_FACTOR_OUT_OF_RANGE",
        "PROPOSAL_ERROR_QUADRATIC_SLIPPAGE_FACTOR_OUT_OF_RANGE"
      ],
      "default": "PROPOSAL_ERROR_UNSPECIFIED",
      "description": "- PROPOSAL_ERROR_UNSPECIFIED: Default value\n - PROPOSAL_ERROR_CLOSE_TIME_TOO_SOON: The specified close time is too early based on network parameters\n - PROPOSAL_ERROR_CLOSE_TIME_TOO_LATE: The specified close time is too late based on network parameters\n - PROPOSAL_ERROR_ENACT_TIME_TOO_SOON: The specified enactment time is too early based on network parameters\n - PROPOSAL_ERROR_ENACT_TIME_TOO_LATE: The specified enactment time is too late based on network parameters\n - PROPOSAL_ERROR_INSUFFICIENT_TOKENS: The proposer for this proposal has insufficient tokens\n - PROPOSAL_ERROR_INVALID_INSTRUMENT_SECURITY: The instrument quote name and base name were the same\n - PROPOSAL_ERROR_NO_PRODUCT: The proposal has no product\n - PROPOSAL_ERROR_UNSUPPORTED_PRODUCT: The specified product is not supported\n - PROPOSAL_ERROR_NO_TRADING_MODE: The proposal has no trading mode\n - PROPOSAL_ERROR_UNSUPPORTED_TRADING_MODE: The proposal has an unsupported trading mode\n - PROPOSAL_ERROR_NODE_VALIDATION_FAILED: The proposal failed node validation\n - PROPOSAL_ERROR_MISSING_BUILTIN_ASSET_FIELD: A field is missing in a builtin asset source\n - PROPOSAL_ERROR_MISSING_ERC20_CONTRACT_ADDRESS: The contract address is missing in the ERC20 asset source\n - PROPOSAL_ERROR_INVALID_ASSET: The asset ID is invalid or does not exist on the Vega network\n - PROPOSAL_ERROR_INCOMPATIBLE_TIMESTAMPS: Proposal terms timestamps are not compatible (Validation \u003c Closing \u003c Enactment)\n - PROPOSAL_ERROR_NO_RISK_PARAMETERS: No risk parameters were specified\n - PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_KEY: Invalid key in update network parameter proposal\n - PROPOSAL_ERROR_NETWORK_PARAMETER_INVALID_VALUE: Invalid value in update network parameter proposal\n - PROPOSAL_ERROR_NETWORK_PARAMETER_VALIDATION_FAILED: Validation failed for network parameter proposal\n - PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_SMALL: Opening auction duration is less than the network minimum opening auction time\n - PROPOSAL_ERROR_OPENING_AUCTION_DURATION_TOO_LARGE: Opening auction duration is more than the network minimum opening auction time\n - PROPOSAL_ERROR_COULD_NOT_INSTANTIATE_MARKET: Market proposal market could not be instantiated in execution\n - PROPOSAL_ERROR_INVALID_FUTURE_PRODUCT: Market proposal market contained invalid product definition\n - PROPOSAL_ERROR_INVALID_RISK_PARAMETER: Market proposal has invalid risk parameter\n - PROPOSAL_ERROR_MAJORITY_THRESHOLD_NOT_REACHED: Proposal was declined because vote didn't reach the majority threshold required\n - PROPOSAL_ERROR_PARTICIPATION_THRESHOLD_NOT_REACHED: Proposal declined because the participation threshold was not reached\n - PROPOSAL_ERROR_INVALID_ASSET_DETAILS: Asset proposal has invalid asset details\n - PROPOSAL_ERROR_UNKNOWN_TYPE: Proposal is an unknown type\n - PROPOSAL_ERROR_UNKNOWN_RISK_PARAMETER_TYPE: Proposal has an unknown risk parameter type\n - PROPOSAL_ERROR_INVALID_FREEFORM: Validation failed for freeform proposal\n - PROPOSAL_ERROR_INSUFFICIENT_EQUITY_LIKE_SHARE: The party doesn't have enough equity-like share to propose an update on the market\ntargeted by the proposal\n - PROPOSAL_ERROR_INVALID_MARKET: The market targeted by the proposal does not exist or is not eligible for modification\n - PROPOSAL_ERROR_TOO_MANY_MARKET_DECIMAL_PLACES: The market proposal decimal place is higher than the market settlement asset decimal places\n - PROPOSAL_ERROR_TOO_MANY_PRICE_MONITORING_TRIGGERS: The market proposal contains too many price monitoring triggers\n - PROPOSAL_ERROR_ERC20_ADDRESS_ALREADY_IN_USE: The market proposal contains too many price monitoring triggers\n - PROPOSAL_ERROR_LP_PRICE_RANGE_NONPOSITIVE: The LP price range must be larger than 0\n - PROPOSAL_ERROR_LP_PRICE_RANGE_TOO_LARGE: The LP price range must not be larger than 100\n - PROPOSAL_ERROR_LINEAR_SLIPPAGE_FACTOR_OUT_OF_RANGE: The linear slippage factor is out of range (either negative or too large)\n - PROPOSAL_ERROR_QUADRATIC_SLIPPAGE_FACTOR_OUT_OF_RANGE: The quadratic slippage factor is out of range (either negative or too large)",
      "title": "A list of possible errors that can cause a proposal to be in state rejected or failed"
    },
    "vegaProposalRationale": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description to show a short title / something in case the link goes offline.\nThis is to be between 0 and 20k unicode characters.\nThis is mandatory for all proposals."
        },
        "title": {
          "type": "string",
          "description": "Title to be used to give a short description of the proposal in lists.\nThis is to be between 0 and 100 unicode characters.\nThis is mandatory for all proposals."
        }
      },
      "description": "The rationale behind a proposal."
    },
    "vegaProposalState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_FAILED",
        "STATE_OPEN",
        "STATE_PASSED",
        "STATE_REJECTED",
        "STATE_DECLINED",
        "STATE_ENACTED",
        "STATE_WAITING_FOR_NODE_VOTE"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: Default value, always invalid\n - STATE_FAILED: Proposal enactment has failed - even though proposal has passed, its execution could not be performed\n - STATE_OPEN: Proposal is open for voting\n - STATE_PASSED: Proposal has gained enough support to be executed\n - STATE_REJECTED: Proposal wasn't accepted (proposal terms failed validation due to wrong configuration or failing to meet network requirements)\n - STATE_DECLINED: Proposal didn't get enough votes (either failing to gain required participation or majority level)\n - STATE_ENACTED: Proposal enacted\n - STATE_WAITING_FOR_NODE_VOTE: Waiting for node validation of the proposal",
      "title": "Proposal state transition:\nOpen -\u003e\n  - Passed -\u003e Enacted.\n  - Passed -\u003e Failed.\n  - Declined\nRejected\nProposal can enter Failed state from any other state"
    },
    "vegaProposalTerms": {
      "type": "object",
      "properties": {
        "closingTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp (Unix time in seconds) when voting closes for this proposal,\nconstrained by `minClose` and `maxClose` network parameters"
        },
        "enactmentTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed),\nconstrained by `minEnact` and `maxEnact` network parameters"
        },
        "validationTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Validation timestamp (Unix time in seconds)"
        },
        "updateMarket": {
          "$ref": "#/definitions/vegaUpdateMarket",
          "title": "Proposal change for modifying an existing market on Vega"
        },
        "newMarket": {
          "$ref": "#/definitions/vegaNewMarket",
          "title": "Proposal change for creating new market on Vega"
        },
        "updateNetworkParameter": {
          "$ref": "#/definitions/vegaUpdateNetworkParameter",
          "title": "Proposal change for updating Vega network parameters"
        },
        "newAsset": {
          "$ref": "#/definitions/vegaNewAsset",
          "title": "Proposal change for creating new assets on Vega"
        },
        "newFreeform": {
          "$ref": "#/definitions/vegaNewFreeform",
          "title": "Proposal change for a freeform request, which can be voted on but does not change the behaviour of the system,\nand can be used to gauge community sentiment"
        },
        "updateAsset": {
          "$ref": "#/definitions/vegaUpdateAsset",
          "title": "Proposal change for updating an asset"
        }
      },
      "title": "Terms for a governance proposal on Vega"
    },
    "vegaRiskFactor": {
      "type": "object",
      "properties": {
        "market": {
          "type": "string",
          "title": "Market ID that relates to this risk factor"
        },
        "short": {
          "type": "string",
          "title": "Short Risk factor value"
        },
        "long": {
          "type": "string",
          "title": "Long Risk factor value"
        }
      },
      "title": "Risk factors are used to calculate the current risk associated with orders trading on a given market"
    },
    "vegaScalingFactors": {
      "type": "object",
      "properties": {
        "searchLevel": {
          "type": "number",
          "format": "double",
          "title": "Search level"
        },
        "initialMargin": {
          "type": "number",
          "format": "double",
          "title": "Initial margin level"
        },
        "collateralRelease": {
          "type": "number",
          "format": "double",
          "title": "Collateral release level"
        }
      },
      "title": "Scaling Factors (for use in margin calculation)"
    },
    "vegaSide": {
      "type": "string",
      "enum": [
        "SIDE_UNSPECIFIED",
        "SIDE_BUY",
        "SIDE_SELL"
      ],
      "default": "SIDE_UNSPECIFIED",
      "description": "- SIDE_UNSPECIFIED: Default value, always invalid\n - SIDE_BUY: Buy order\n - SIDE_SELL: Sell order",
      "title": "A side relates to the direction of an order, to Buy, or Sell"
    },
    "vegaSimpleModelParams": {
      "type": "object",
      "properties": {
        "factorLong": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined risk factor value for long"
        },
        "factorShort": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined risk factor value for short"
        },
        "maxMoveUp": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined maximum price move up that the model considers as valid"
        },
        "minMoveDown": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined minimum price move down that the model considers as valid"
        },
        "probabilityOfTrading": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined constant probability of trading"
        }
      },
      "title": "Risk model parameters for simple modelling"
    },
    "vegaSimpleRiskModel": {
      "type": "object",
      "properties": {
        "params": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Risk model params for simple modelling"
        }
      },
      "title": "Risk model for simple modelling"
    },
    "vegaTargetStakeParameters": {
      "type": "object",
      "properties": {
        "timeWindow": {
          "type": "string",
          "format": "int64",
          "title": "Specifies length of time window expressed in seconds for target stake calculation"
        },
        "scalingFactor": {
          "type": "number",
          "format": "double",
          "title": "Specifies scaling factors used in target stake calculation"
        }
      },
      "title": "TargetStakeParameters contains parameters used in target stake calculation"
    },
    "vegaTradableInstrument": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrument",
          "title": "Instrument details"
        },
        "marginCalculator": {
          "$ref": "#/definitions/vegaMarginCalculator",
          "title": "Margin calculator for the instrument"
        },
        "logNormalRiskModel": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal"
        },
        "simpleRiskModel": {
          "$ref": "#/definitions/vegaSimpleRiskModel",
          "title": "Simple"
        }
      },
      "title": "Tradable Instrument definition"
    },
    "vegaTrade": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the trade (generated by Vega)"
        },
        "marketId": {
          "type": "string",
          "title": "Market identifier (the market that the trade occurred on)"
        },
        "price": {
          "type": "string",
          "description": "Price for the trade, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's decimal places."
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "description": "Size filled for the trade\nThis field is an unsigned integer passed as a string and needs to be scaled using the market's position decimal places."
        },
        "buyer": {
          "type": "string",
          "title": "Unique party identifier for the buyer"
        },
        "seller": {
          "type": "string",
          "title": "Unique party identifier for the seller"
        },
        "aggressor": {
          "$ref": "#/definitions/vegaSide",
          "title": "Direction of the aggressive party e.g. SIDE_BUY or SIDE_SELL - See [`Side`](#vega.Side)"
        },
        "buyOrder": {
          "type": "string",
          "title": "Identifier of the order from the buy side"
        },
        "sellOrder": {
          "type": "string",
          "title": "Identifier of the order from the sell side"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the trade occurred, in nanoseconds since the epoch\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "type": {
          "$ref": "#/definitions/vegaTradeType",
          "title": "Type for the trade - See [`Trade.Type`](#vega.Trade.Type)"
        },
        "buyerFee": {
          "$ref": "#/definitions/vegaFee",
          "title": "Fee amount charged to the buyer party for the trade"
        },
        "sellerFee": {
          "$ref": "#/definitions/vegaFee",
          "title": "Fee amount charged to the seller party for the trade"
        },
        "buyerAuctionBatch": {
          "type": "string",
          "format": "uint64",
          "title": "Auction batch number that the buy side order was placed in"
        },
        "sellerAuctionBatch": {
          "type": "string",
          "format": "uint64",
          "title": "Auction batch number that the sell side order was placed in"
        }
      },
      "title": "A trade occurs when an aggressive order crosses one or more passive orders on the order book for a market on Vega"
    },
    "vegaTradeType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_DEFAULT",
        "TYPE_NETWORK_CLOSE_OUT_GOOD",
        "TYPE_NETWORK_CLOSE_OUT_BAD"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: Default value, always invalid\n - TYPE_DEFAULT: Normal trading between two parties\n - TYPE_NETWORK_CLOSE_OUT_GOOD: Trading initiated by the network with another party on the book,\nwhich helps to zero-out the positions of one or more distressed parties\n - TYPE_NETWORK_CLOSE_OUT_BAD: Trading initiated by the network with another party off the book,\nwith a distressed party in order to zero-out the position of the party",
      "title": "Type values for a trade"
    },
    "vegaTransferType": {
      "type": "string",
      "enum": [
        "TRANSFER_TYPE_UNSPECIFIED",
        "TRANSFER_TYPE_LOSS",
        "TRANSFER_TYPE_WIN",
        "TRANSFER_TYPE_MTM_LOSS",
        "TRANSFER_TYPE_MTM_WIN",
        "TRANSFER_TYPE_MARGIN_LOW",
        "TRANSFER_TYPE_MARGIN_HIGH",
        "TRANSFER_TYPE_MARGIN_CONFISCATED",
        "TRANSFER_TYPE_MAKER_FEE_PAY",
        "TRANSFER_TYPE_MAKER_FEE_RECEIVE",
        "TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY",
        "TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE",
        "TRANSFER_TYPE_LIQUIDITY_FEE_PAY",
        "TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE",
        "TRANSFER_TYPE_BOND_LOW",
        "TRANSFER_TYPE_BOND_HIGH",
        "TRANSFER_TYPE_WITHDRAW",
        "TRANSFER_TYPE_DEPOSIT",
        "TRANSFER_TYPE_BOND_SLASHING",
        "TRANSFER_TYPE_REWARD_PAYOUT",
        "TRANSFER_TYPE_TRANSFER_FUNDS_SEND",
        "TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE",
        "TRANSFER_TYPE_CLEAR_ACCOUNT",
        "TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE"
      ],
      "default": "TRANSFER_TYPE_UNSPECIFIED",
      "description": "- TRANSFER_TYPE_UNSPECIFIED: Default value, always invalid\n - TRANSFER_TYPE_LOSS: Funds deducted after final settlement loss\n - TRANSFER_TYPE_WIN: Funds added to general account after final settlement gain\n - TRANSFER_TYPE_MTM_LOSS: Funds deducted from margin account after mark to market loss\n - TRANSFER_TYPE_MTM_WIN: Funds added to margin account after mark to market gain\n - TRANSFER_TYPE_MARGIN_LOW: Funds transferred from general account to meet margin requirement\n - TRANSFER_TYPE_MARGIN_HIGH: Excess margin amount returned to general account\n - TRANSFER_TYPE_MARGIN_CONFISCATED: Margin confiscated from margin account to fulfil closeout\n - TRANSFER_TYPE_MAKER_FEE_PAY: Maker fee paid from general account\n - TRANSFER_TYPE_MAKER_FEE_RECEIVE: Maker fee received into general account\n - TRANSFER_TYPE_INFRASTRUCTURE_FEE_PAY: Infrastructure fee paid from general account\n - TRANSFER_TYPE_INFRASTRUCTURE_FEE_DISTRIBUTE: Infrastructure fee received into general account\n - TRANSFER_TYPE_LIQUIDITY_FEE_PAY: Liquidity fee paid from general account\n - TRANSFER_TYPE_LIQUIDITY_FEE_DISTRIBUTE: Liquidity fee received into general account\n - TRANSFER_TYPE_BOND_LOW: Bond account funded from general account to meet required bond amount\n - TRANSFER_TYPE_BOND_HIGH: Bond returned to general account after liquidity commitment was reduced\n - TRANSFER_TYPE_WITHDRAW: Funds withdrawn from general account\n - TRANSFER_TYPE_DEPOSIT: Funds deposited to general account\n - TRANSFER_TYPE_BOND_SLASHING: Bond account penalised when liquidity commitment not met\n - TRANSFER_TYPE_REWARD_PAYOUT: Reward payout received\n - TRANSFER_TYPE_TRANSFER_FUNDS_SEND: A network internal instruction for the collateral engine to move funds from a user's general account into the pending transfers pool\n - TRANSFER_TYPE_TRANSFER_FUNDS_DISTRIBUTE: A network internal instruction for the collateral engine to move funds from the pending transfers pool account into the destination account\n - TRANSFER_TYPE_CLEAR_ACCOUNT: Market-related accounts emptied because market has closed\n - TRANSFER_TYPE_CHECKPOINT_BALANCE_RESTORE: Balances restored after network restart",
      "title": "Transfers can occur between parties on Vega, these are the types that indicate why a transfer took place"
    },
    "vegaUpdateAsset": {
      "type": "object",
      "properties": {
        "assetId": {
          "type": "string",
          "title": "The ID of the asset to be updated"
        },
        "changes": {
          "$ref": "#/definitions/vegaAssetDetailsUpdate",
          "title": "The changes to apply on an existing asset"
        }
      },
      "title": "Update an existing asset on Vega"
    },
    "vegaUpdateFutureProduct": {
      "type": "object",
      "properties": {
        "quoteName": {
          "type": "string",
          "title": "Human-readable name/abbreviation of the quote name"
        },
        "dataSourceSpecForSettlementData": {
          "$ref": "#/definitions/vegaDataSourceDefinition",
          "title": "The data source spec describing the data of settlement data"
        },
        "dataSourceSpecForTradingTermination": {
          "$ref": "#/definitions/vegaDataSourceDefinition",
          "title": "The data source spec describing the data source for trading termination"
        },
        "dataSourceSpecBinding": {
          "$ref": "#/definitions/vegaDataSourceSpecToFutureBinding",
          "title": "The binding between the data source spec and the settlement data"
        }
      },
      "title": "Future product configuration"
    },
    "vegaUpdateInstrumentConfiguration": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "title": "Instrument code, human-readable shortcode used to describe the instrument"
        },
        "future": {
          "$ref": "#/definitions/vegaUpdateFutureProduct",
          "title": "Future"
        }
      },
      "title": "Instrument configuration"
    },
    "vegaUpdateMarket": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "The identifier of the market to update"
        },
        "changes": {
          "$ref": "#/definitions/vegaUpdateMarketConfiguration",
          "title": "The updated configuration of the market"
        }
      },
      "title": "Update an existing market on Vega"
    },
    "vegaUpdateMarketConfiguration": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaUpdateInstrumentConfiguration",
          "title": "Updated market instrument configuration"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional market metadata, tags"
        },
        "priceMonitoringParameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "Price monitoring parameters"
        },
        "liquidityMonitoringParameters": {
          "$ref": "#/definitions/vegaLiquidityMonitoringParameters",
          "title": "Liquidity monitoring parameters"
        },
        "simple": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected"
        },
        "logNormal": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected"
        },
        "lpPriceRange": {
          "type": "string",
          "title": "Percentage move up and down from the mid price which specifies the range of \nprice levels over which automated liquidity provision orders will be deployed"
        },
        "linearSlippageFactor": {
          "type": "string",
          "title": "Linear slippage factor is used to cap the slippage component of maintainence margin - it is applied to the slippage volume"
        },
        "quadraticSlippageFactor": {
          "type": "string",
          "title": "Quadratic slippage factor is used to cap the slippage component of maintainence margin - it is applied to the square of the slippage volume"
        }
      },
      "title": "Configuration to update a market on Vega"
    },
    "vegaUpdateNetworkParameter": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNetworkParameter",
          "title": "The network parameter to update"
        }
      },
      "title": "Update network configuration on Vega"
    },
    "vegaVote": {
      "type": "object",
      "properties": {
        "partyId": {
          "type": "string",
          "title": "Voter's party identifier"
        },
        "value": {
          "$ref": "#/definitions/vegaVoteValue",
          "title": "Actual vote"
        },
        "proposalId": {
          "type": "string",
          "title": "Identifier of the proposal being voted on"
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "title": "Vote timestamp for date and time (in nanoseconds) when vote was submitted to the network"
        },
        "totalGovernanceTokenBalance": {
          "type": "string",
          "title": "Total number of governance token for the party that cast the vote"
        },
        "totalGovernanceTokenWeight": {
          "type": "string",
          "title": "The weight of this vote based on the total number of governance tokens"
        },
        "totalEquityLikeShareWeight": {
          "type": "string",
          "title": "The weight of the vote compared to the total amount of equity-like share on the market"
        }
      },
      "title": "Governance vote"
    },
    "vegaVoteValue": {
      "type": "string",
      "enum": [
        "VALUE_UNSPECIFIED",
        "VALUE_NO",
        "VALUE_YES"
      ],
      "default": "VALUE_UNSPECIFIED",
      "description": "- VALUE_UNSPECIFIED: Default value, always invalid\n - VALUE_NO: A vote against the proposal\n - VALUE_YES: A vote in favour of the proposal",
      "title": "Vote value"
    },
    "vegaWithdrawExt": {
      "type": "object",
      "properties": {
        "erc20": {
          "$ref": "#/definitions/vegaErc20WithdrawExt",
          "title": "ERC20 withdrawal details"
        }
      },
      "title": "Withdrawal external details"
    },
    "vegaWithdrawal": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the withdrawal"
        },
        "partyId": {
          "type": "string",
          "title": "Unique party identifier of the user initiating the withdrawal"
        },
        "amount": {
          "type": "string",
          "description": "The amount to be withdrawn\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "asset": {
          "type": "string",
          "title": "The asset to withdraw funds from"
        },
        "status": {
          "$ref": "#/definitions/vegaWithdrawalStatus",
          "title": "The status of the withdrawal"
        },
        "ref": {
          "type": "string",
          "title": "The reference which is used by the foreign chain\nto refer to this withdrawal"
        },
        "txHash": {
          "type": "string",
          "title": "The hash of the foreign chain for this transaction"
        },
        "createdTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the network started to process this withdrawal"
        },
        "withdrawnTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the withdrawal was finalised by the network"
        },
        "ext": {
          "$ref": "#/definitions/vegaWithdrawExt",
          "title": "Foreign chain specifics"
        }
      },
      "title": "A withdrawal from the Vega network"
    },
    "vegaWithdrawalStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_OPEN",
        "STATUS_REJECTED",
        "STATUS_FINALIZED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: Default value, always invalid\n - STATUS_OPEN: The withdrawal is open and being processed by the network\n - STATUS_REJECTED: The withdrawal have been cancelled\n - STATUS_FINALIZED: The withdrawal went through and is fully finalised, the funds are removed from the\nVega network and are unlocked on the foreign chain bridge, for example, on the Ethereum network",
      "title": "The status of the withdrawal"
    },
    "vegacommandsv1OneOffTransfer": {
      "type": "object",
      "properties": {
        "deliverOn": {
          "type": "string",
          "format": "int64",
          "title": "A unix timestamp in seconds. Time at which the\ntransfer should be delivered into the To account"
        }
      },
      "title": "Specific details for a one off transfer"
    },
    "vegacommandsv1RecurringTransfer": {
      "type": "object",
      "properties": {
        "startEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The first epoch from which this transfer shall be paid"
        },
        "endEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The last epoch at which this transfer shall be paid"
        },
        "factor": {
          "type": "string",
          "title": "factor needs to be \u003e 0"
        },
        "dispatchStrategy": {
          "$ref": "#/definitions/vegaDispatchStrategy",
          "title": "optional parameter defining how a transfer is dispatched"
        }
      },
      "title": "Specific details for a recurring transfer"
    },
    "vegacommandsv1Transfer": {
      "type": "object",
      "properties": {
        "fromAccountType": {
          "$ref": "#/definitions/vegaAccountType",
          "title": "The account type from which the funds of the party\nshould be taken"
        },
        "to": {
          "type": "string",
          "title": "The public key of the destination account"
        },
        "toAccountType": {
          "$ref": "#/definitions/vegaAccountType",
          "title": "The type of the destination account"
        },
        "asset": {
          "type": "string",
          "title": "The asset"
        },
        "amount": {
          "type": "string",
          "description": "The amount to be taken from the source account\nThis field is an unsigned integer passed as a string and needs to be scaled using the asset's decimal places."
        },
        "reference": {
          "type": "string",
          "title": "The reference to be attached to the transfer"
        },
        "oneOff": {
          "$ref": "#/definitions/vegacommandsv1OneOffTransfer"
        },
        "recurring": {
          "$ref": "#/definitions/vegacommandsv1RecurringTransfer"
        }
      },
      "title": "A transfer initiated by a party"
    },
    "vegaeventsv1OneOffTransfer": {
      "type": "object",
      "properties": {
        "deliverOn": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "vegaeventsv1RecurringTransfer": {
      "type": "object",
      "properties": {
        "startEpoch": {
          "type": "string",
          "format": "uint64"
        },
        "endEpoch": {
          "type": "string",
          "format": "uint64"
        },
        "factor": {
          "type": "string"
        },
        "dispatchStrategy": {
          "$ref": "#/definitions/vegaDispatchStrategy"
        }
      }
    },
    "vegaeventsv1Transfer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "fromAccountType": {
          "$ref": "#/definitions/vegaAccountType"
        },
        "to": {
          "type": "string"
        },
        "toAccountType": {
          "$ref": "#/definitions/vegaAccountType"
        },
        "asset": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1TransferStatus"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "reason": {
          "type": "string"
        },
        "oneOff": {
          "$ref": "#/definitions/vegaeventsv1OneOffTransfer"
        },
        "recurring": {
          "$ref": "#/definitions/vegaeventsv1RecurringTransfer"
        }
      }
    }
  }
}
