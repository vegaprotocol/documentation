{
  "swagger": "2.0",
  "info": {
    "title": "blockexplorer/blockexplorer.proto",
    "version": "0.58.0"
  },
  "tags": [
    {
      "name": "Block Explorer"
    }
  ],
  "host": "n13.testnet.vega.xyz/rest",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/transactions": {
      "get": {
        "operationId": "BlockExplorer_ListTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTransactionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BlockExplorer"
        ]
      }
    },
    "/transactions/{hash}": {
      "get": {
        "operationId": "BlockExplorer_GetTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BlockExplorer"
        ]
      }
    }
  },
  "definitions": {
    "ConditionOperator": {
      "type": "string",
      "enum": [
        "OPERATOR_UNSPECIFIED",
        "OPERATOR_EQUALS",
        "OPERATOR_GREATER_THAN",
        "OPERATOR_GREATER_THAN_OR_EQUAL",
        "OPERATOR_LESS_THAN",
        "OPERATOR_LESS_THAN_OR_EQUAL"
      ],
      "default": "OPERATOR_UNSPECIFIED",
      "description": "Comparator describes the type of comparison.\n\n - OPERATOR_UNSPECIFIED: The default value\n - OPERATOR_EQUALS: Verify if the property values are strictly equal or not.\n - OPERATOR_GREATER_THAN: Verify if the oracle data value is greater than the Condition value.\n - OPERATOR_GREATER_THAN_OR_EQUAL: Verify if the oracle data value is greater than or equal to the Condition\nvalue.\n - OPERATOR_LESS_THAN: Verify if the oracle data value is less than the Condition value.\n - OPERATOR_LESS_THAN_OR_EQUAL: Verify if the oracle data value is less or equal to than the Condition\nvalue."
    },
    "OracleDataSubmissionOracleSource": {
      "type": "string",
      "enum": [
        "ORACLE_SOURCE_UNSPECIFIED",
        "ORACLE_SOURCE_OPEN_ORACLE",
        "ORACLE_SOURCE_JSON"
      ],
      "default": "ORACLE_SOURCE_UNSPECIFIED",
      "description": "- ORACLE_SOURCE_UNSPECIFIED: The default value\n - ORACLE_SOURCE_OPEN_ORACLE: Support for Open Oracle standard\n - ORACLE_SOURCE_JSON: Support for custom JSON data",
      "title": "The supported Oracle sources"
    },
    "OrderTimeInForce": {
      "type": "string",
      "enum": [
        "TIME_IN_FORCE_UNSPECIFIED",
        "TIME_IN_FORCE_GTC",
        "TIME_IN_FORCE_GTT",
        "TIME_IN_FORCE_IOC",
        "TIME_IN_FORCE_FOK",
        "TIME_IN_FORCE_GFA",
        "TIME_IN_FORCE_GFN"
      ],
      "default": "TIME_IN_FORCE_UNSPECIFIED",
      "description": "- TIME_IN_FORCE_UNSPECIFIED: Default value for TimeInForce, can be valid for an amend\n - TIME_IN_FORCE_GTC: Good until cancelled, the order trades any amount and as much as possible\nand remains on the book until it either trades completely or is cancelled\n - TIME_IN_FORCE_GTT: Good until specified time, this order type trades any amount and as much as possible\nand remains on the book until it either trades completely, is cancelled, or expires at a set time\nNOTE: this may in future be multiple types or have sub types for orders that provide different ways of specifying expiry\n - TIME_IN_FORCE_IOC: Immediate or cancel, the order trades any amount and as much as possible\nbut does not remain on the book (whether it trades or not)\n - TIME_IN_FORCE_FOK: Fill or kill, The order either trades completely (remainingSize == 0 after adding)\nor not at all, does not remain on the book if it doesn't trade\n - TIME_IN_FORCE_GFA: Good for auction, this order is only accepted during an auction period\n - TIME_IN_FORCE_GFN: Good for normal, this order is only accepted during normal trading (that can be continuous trading or frequent batched auctions)",
      "title": "Time In Force for an order"
    },
    "UndelegateSubmissionMethod": {
      "type": "string",
      "enum": [
        "METHOD_UNSPECIFIED",
        "METHOD_NOW",
        "METHOD_AT_END_OF_EPOCH",
        "METHOD_IN_ANGER"
      ],
      "default": "METHOD_UNSPECIFIED"
    },
    "VoteValue": {
      "type": "string",
      "enum": [
        "VALUE_UNSPECIFIED",
        "VALUE_NO",
        "VALUE_YES"
      ],
      "default": "VALUE_UNSPECIFIED",
      "description": "- VALUE_UNSPECIFIED: Default value, always invalid\n - VALUE_NO: A vote against the proposal\n - VALUE_YES: A vote in favour of the proposal",
      "title": "Vote value"
    },
    "blockexplorerapiv1Transaction": {
      "type": "object",
      "properties": {
        "block": {
          "type": "string",
          "format": "uint64"
        },
        "index": {
          "type": "integer",
          "format": "int64"
        },
        "hash": {
          "type": "string"
        },
        "submitter": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "cursor": {
          "type": "string"
        },
        "command": {
          "$ref": "#/definitions/v1InputData"
        }
      }
    },
    "commandsv1Transfer": {
      "type": "object",
      "properties": {
        "fromAccountType": {
          "$ref": "#/definitions/vegaAccountType",
          "title": "The account type from which the funds of the party\nshould be taken"
        },
        "to": {
          "type": "string",
          "title": "The public key of the destination account"
        },
        "toAccountType": {
          "$ref": "#/definitions/vegaAccountType",
          "title": "The type of the destination account"
        },
        "asset": {
          "type": "string",
          "title": "The asset"
        },
        "amount": {
          "type": "string",
          "title": "The amount to be taken from the source account"
        },
        "reference": {
          "type": "string",
          "title": "The reference to be attached to the transfer"
        },
        "oneOff": {
          "$ref": "#/definitions/v1OneOffTransfer"
        },
        "recurring": {
          "$ref": "#/definitions/v1RecurringTransfer"
        }
      },
      "title": "A transfer initiated by a party"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "v1AnnounceNode": {
      "type": "object",
      "properties": {
        "vegaPubKey": {
          "type": "string",
          "title": "Vega public key, required field"
        },
        "ethereumAddress": {
          "type": "string",
          "title": "Ethereum public key, required field"
        },
        "chainPubKey": {
          "type": "string",
          "title": "Public key for the blockchain, required field"
        },
        "infoUrl": {
          "type": "string",
          "title": "URL with more info on the node"
        },
        "country": {
          "type": "string",
          "title": "Country code (ISO 3166-1 alpha-2) for the location of the node"
        },
        "id": {
          "type": "string",
          "title": "ID of the validator, (public master key)"
        },
        "name": {
          "type": "string",
          "title": "Name of the validator"
        },
        "avatarUrl": {
          "type": "string",
          "title": "AvatarURL of the validator"
        },
        "vegaPubKeyIndex": {
          "type": "integer",
          "format": "int64",
          "title": "Vega public key derivation index"
        },
        "fromEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The epoch from which the validator is expected\nto be ready to validate blocks"
        },
        "ethereumSignature": {
          "$ref": "#/definitions/v1Signature",
          "title": "Signature from the validator made using the ethereum wallet"
        },
        "vegaSignature": {
          "$ref": "#/definitions/v1Signature",
          "title": "Signature from the validator made using the vega wallet"
        },
        "submitterAddress": {
          "type": "string",
          "title": "Ethereum public key to use as a submitter to allow automatic signature generation"
        }
      },
      "title": "Used announce a node as a new potential validator"
    },
    "v1BatchMarketInstructions": {
      "type": "object",
      "properties": {
        "cancellations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OrderCancellation"
          },
          "title": "A list of order cancellations to be processed sequentially"
        },
        "amendments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OrderAmendment"
          },
          "title": "A list of order amendments to be processed sequentially"
        },
        "submissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1OrderSubmission"
          },
          "title": "A list of order submissions to be processed sequentially"
        }
      },
      "title": "A batch of order instructions.\nThis command accepts only the following batches of commands\nand will be processed in the following order:\n- OrderCancellation\n- OrderAmendment\n- OrderSubmission\nThe total amount of commands in the batch across all three lists of\ninstructions is restricted by the following network parameter:\n\"spam.protection.max.batchSize\""
    },
    "v1CancelTransfer": {
      "type": "object",
      "properties": {
        "transferId": {
          "type": "string",
          "title": "The ID of the transfer to cancel"
        }
      },
      "title": "A request for cancelling a recurring transfer"
    },
    "v1ChainEvent": {
      "type": "object",
      "properties": {
        "txId": {
          "type": "string",
          "title": "The identifier of the transaction in which the events happened, usually a hash"
        },
        "nonce": {
          "type": "string",
          "format": "uint64",
          "title": "Arbitrary one-time integer used to prevent replay attacks"
        },
        "builtin": {
          "$ref": "#/definitions/vegaBuiltinAssetEvent",
          "title": "Built-in asset event"
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20Event",
          "title": "Ethereum ERC20 event"
        },
        "stakingEvent": {
          "$ref": "#/definitions/vegaStakingEvent",
          "title": "Ethereum Staking event"
        },
        "erc20Multisig": {
          "$ref": "#/definitions/vegaERC20MultiSigEvent",
          "title": "Ethereum ERC20 multisig event"
        }
      },
      "title": "An event forwarded to the Vega network to provide information on events happening on other networks"
    },
    "v1Condition": {
      "type": "object",
      "properties": {
        "operator": {
          "$ref": "#/definitions/ConditionOperator",
          "description": "comparator is the type of comparison to make on the value."
        },
        "value": {
          "type": "string",
          "description": "value is used by the comparator."
        }
      },
      "title": "Condition describes the condition that must be validated by the"
    },
    "v1DelegateSubmission": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "title": "The ID for the node to delegate to"
        },
        "amount": {
          "type": "string",
          "title": "The amount of stake to delegate"
        }
      },
      "title": "A command to submit an instruction to delegate some stake to a node"
    },
    "v1EthereumKeyRotateSubmission": {
      "type": "object",
      "properties": {
        "targetBlock": {
          "type": "string",
          "format": "uint64",
          "title": "Target block at which the key rotation will take effect on"
        },
        "newAddress": {
          "type": "string",
          "title": "The new adress to rotate to"
        },
        "currentAddress": {
          "type": "string",
          "title": "Currently used public address"
        },
        "submitterAddress": {
          "type": "string",
          "title": "Ethereum public key to use as a submitter to allow automatic signature generation"
        },
        "ethereumSignature": {
          "$ref": "#/definitions/v1Signature",
          "title": "Signature that can be verified using the new ethereum address"
        }
      },
      "title": "A transaction to allow validator to rotate their ethereum keys"
    },
    "v1Filter": {
      "type": "object",
      "properties": {
        "key": {
          "$ref": "#/definitions/v1PropertyKey",
          "description": "key is the oracle data property key targeted by the filter."
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Condition"
          },
          "description": "conditions are the conditions that should be matched by the data to be\nconsidered of interest."
        }
      },
      "description": "Filter describes the conditions under which an oracle data is considered of\ninterest or not."
    },
    "v1GetTransactionResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/blockexplorerapiv1Transaction"
        }
      }
    },
    "v1InputData": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string",
          "format": "uint64",
          "description": "A number to provide uniqueness to prevent accidental replays and,\nin combination with `block_height`, deliberate attacks.\nA nonce provides uniqueness for otherwise identical transactions,\nensuring that the transaction hash uniquely identifies a specific transaction.\nGranted all other fields are equal, the nonce can either be a counter\nor generated at random to submit multiple transactions within the same\nblock (see below), without being identified as replays.\nPlease note that Protocol Buffers do not have a canonical, unique encoding\nand therefore different libraries or binaries may encode the same message\nslightly differently, causing a different hash."
        },
        "blockHeight": {
          "type": "string",
          "format": "uint64",
          "description": "The block height at which the transaction was made.\nThis should be the current block height. The transaction will be valid\nfrom the block and up to the `tolerance` block height.\nExample: If the network has a tolerance of 150 blocks and `block_height`\nis set to `200`, then the transaction will be valid until block `350`.\nNote that a `block_height` that is ahead of the real block height will be\nrejected. The tolerance can be queried from the chain's network parameters.\n`block_height` prevents replay attacks in conjunction with `nonce` (see above)."
        },
        "orderSubmission": {
          "$ref": "#/definitions/v1OrderSubmission",
          "title": "User commands"
        },
        "orderCancellation": {
          "$ref": "#/definitions/v1OrderCancellation"
        },
        "orderAmendment": {
          "$ref": "#/definitions/v1OrderAmendment"
        },
        "withdrawSubmission": {
          "$ref": "#/definitions/v1WithdrawSubmission"
        },
        "proposalSubmission": {
          "$ref": "#/definitions/v1ProposalSubmission"
        },
        "voteSubmission": {
          "$ref": "#/definitions/v1VoteSubmission"
        },
        "liquidityProvisionSubmission": {
          "$ref": "#/definitions/v1LiquidityProvisionSubmission"
        },
        "delegateSubmission": {
          "$ref": "#/definitions/v1DelegateSubmission"
        },
        "undelegateSubmission": {
          "$ref": "#/definitions/v1UndelegateSubmission"
        },
        "liquidityProvisionCancellation": {
          "$ref": "#/definitions/v1LiquidityProvisionCancellation"
        },
        "liquidityProvisionAmendment": {
          "$ref": "#/definitions/v1LiquidityProvisionAmendment"
        },
        "transfer": {
          "$ref": "#/definitions/commandsv1Transfer"
        },
        "cancelTransfer": {
          "$ref": "#/definitions/v1CancelTransfer"
        },
        "announceNode": {
          "$ref": "#/definitions/v1AnnounceNode"
        },
        "batchMarketInstructions": {
          "$ref": "#/definitions/v1BatchMarketInstructions"
        },
        "nodeVote": {
          "$ref": "#/definitions/v1NodeVote",
          "title": "Validator commands"
        },
        "nodeSignature": {
          "$ref": "#/definitions/v1NodeSignature"
        },
        "chainEvent": {
          "$ref": "#/definitions/v1ChainEvent"
        },
        "keyRotateSubmission": {
          "$ref": "#/definitions/v1KeyRotateSubmission"
        },
        "stateVariableProposal": {
          "$ref": "#/definitions/v1StateVariableProposal"
        },
        "validatorHeartbeat": {
          "$ref": "#/definitions/v1ValidatorHeartbeat"
        },
        "ethereumKeyRotateSubmission": {
          "$ref": "#/definitions/v1EthereumKeyRotateSubmission"
        },
        "protocolUpgradeProposal": {
          "$ref": "#/definitions/v1ProtocolUpgradeProposal"
        },
        "issueSignatures": {
          "$ref": "#/definitions/v1IssueSignatures"
        },
        "oracleDataSubmission": {
          "$ref": "#/definitions/v1OracleDataSubmission",
          "title": "Oracles"
        }
      }
    },
    "v1IssueSignatures": {
      "type": "object",
      "properties": {
        "submitter": {
          "type": "string",
          "title": "The ethereum address which will submit the signatures to the smart-contract"
        },
        "kind": {
          "$ref": "#/definitions/v1NodeSignatureKind",
          "title": "The kind of signatures to generate, namely for whether a signer is being added or removed"
        },
        "validatorNodeId": {
          "type": "string",
          "title": "The ID of the node that will be signed in or out of the smartcontract"
        }
      }
    },
    "v1KeyRotateSubmission": {
      "type": "object",
      "properties": {
        "newPubKeyIndex": {
          "type": "integer",
          "format": "int64",
          "title": "New Vega public key derivation index"
        },
        "targetBlock": {
          "type": "string",
          "format": "uint64",
          "title": "Target block at which the key rotation will take effect on"
        },
        "newPubKey": {
          "type": "string",
          "title": "The new public key to rotate to"
        },
        "currentPubKeyHash": {
          "type": "string",
          "title": "Hash of currently used public key"
        }
      },
      "title": "A transaction to allow validator to rotate their vega keys"
    },
    "v1LiquidityProvisionAmendment": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string"
        },
        "commitmentAmount": {
          "type": "string",
          "title": "From here at least one of the following is required to consider the command valid"
        },
        "fee": {
          "type": "string"
        },
        "sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          }
        },
        "buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          }
        },
        "reference": {
          "type": "string"
        }
      },
      "title": "Amend a liquidity provision request"
    },
    "v1LiquidityProvisionCancellation": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string"
        }
      },
      "title": "Cancel a liquidity provision request"
    },
    "v1LiquidityProvisionSubmission": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        },
        "commitmentAmount": {
          "type": "string",
          "title": "Specified as a unitless number that represents the amount of settlement asset of the market"
        },
        "fee": {
          "type": "string",
          "title": "Nominated liquidity fee factor, which is an input to the calculation of taker fees on the market, as per setting fees and rewarding liquidity providers"
        },
        "sells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity sell orders to meet the liquidity provision obligation"
        },
        "buys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaLiquidityOrder"
          },
          "title": "A set of liquidity buy orders to meet the liquidity provision obligation"
        },
        "reference": {
          "type": "string",
          "title": "A reference to be added to every order created out of this liquidityProvisionSubmission"
        }
      },
      "title": "A liquidity provision submitted for a given market"
    },
    "v1ListTransactionsResponse": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/blockexplorerapiv1Transaction"
          }
        }
      }
    },
    "v1NodeSignature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "The identifier of the resource being signed"
        },
        "sig": {
          "type": "string",
          "format": "byte",
          "title": "The signature"
        },
        "kind": {
          "$ref": "#/definitions/v1NodeSignatureKind",
          "title": "The kind of resource being signed"
        }
      },
      "title": "Represents a signature from a validator, to be used by a foreign chain in order to recognise a decision taken by the Vega network"
    },
    "v1NodeSignatureKind": {
      "type": "string",
      "enum": [
        "NODE_SIGNATURE_KIND_UNSPECIFIED",
        "NODE_SIGNATURE_KIND_ASSET_NEW",
        "NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL",
        "NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_ADDED",
        "NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_REMOVED",
        "NODE_SIGNATURE_KIND_ASSET_UPDATE"
      ],
      "default": "NODE_SIGNATURE_KIND_UNSPECIFIED",
      "description": "- NODE_SIGNATURE_KIND_UNSPECIFIED: Represents an unspecified or missing value from the input\n - NODE_SIGNATURE_KIND_ASSET_NEW: Represents a signature for a new asset allow-listing\n - NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL: Represents a signature for an asset withdrawal\n - NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_ADDED: Represents a signature for a new signer added to the erc20 multisig contract\n - NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_REMOVED: Represents a signature for a signer removed from the erc20 multisig contract\n - NODE_SIGNATURE_KIND_ASSET_UPDATE: Represents a signature for an asset update allow-listing",
      "title": "The kind of the signature created by a node, for example, allow-listing a new asset, withdrawal etc"
    },
    "v1NodeVote": {
      "type": "object",
      "properties": {
        "reference": {
          "type": "string",
          "title": "Reference, required field"
        }
      },
      "title": "Used when a node votes for validating a given resource exists or is valid,\nfor example, an ERC20 deposit is valid and exists on ethereum"
    },
    "v1OneOffTransfer": {
      "type": "object",
      "properties": {
        "deliverOn": {
          "type": "string",
          "format": "int64",
          "title": "A unix timestamp in second. Time at which the\ntransfer should be delivered in the to account"
        }
      },
      "title": "Specific details for a one off transfer"
    },
    "v1OracleDataSubmission": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/OracleDataSubmissionOracleSource",
          "title": "The source from which the data is coming from"
        },
        "payload": {
          "type": "string",
          "format": "byte",
          "title": "The data provided by the third party provider"
        }
      },
      "title": "Command to submit new Oracle data from third party providers"
    },
    "v1OracleSpecConfiguration": {
      "type": "object",
      "properties": {
        "pubKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "pubKeys is the list of authorized public keys that signed the data for this\noracle. All the public keys in the oracle data should be contained in these\npublic keys."
        },
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Filter"
          },
          "description": "filters describes which oracle data are considered of interest or not for\nthe product (or the risk model)."
        }
      },
      "description": "An oracle spec describe the oracle data that a product (or a risk model)\nwants to get from the oracle engine."
    },
    "v1OrderAmendment": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "title": "Order identifier, this is required to find the order and will not be updated, required field"
        },
        "marketId": {
          "type": "string",
          "title": "Market identifier, this is required to find the order and will not be updated"
        },
        "price": {
          "type": "string",
          "title": "Amend the price for the order, if the Price value is set, otherwise price will remain unchanged - See [`Price`](#vega.Price)"
        },
        "sizeDelta": {
          "type": "string",
          "format": "int64",
          "title": "Amend the size for the order by the delta specified:\n- To reduce the size from the current value set a negative integer value\n- To increase the size from the current value, set a positive integer value\n- To leave the size unchanged set a value of zero"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Amend the expiry time for the order, if the Timestamp value is set, otherwise expiry time will remain unchanged\n- See [`VegaTimeResponse`](#api.VegaTimeResponse).`timestamp`"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Amend the time in force for the order, set to TIME_IN_FORCE_UNSPECIFIED to remain unchanged\n- See [`TimeInForce`](#api.VegaTimeResponse).`timestamp`"
        },
        "peggedOffset": {
          "type": "string",
          "title": "Amend the pegged order offset for the order"
        },
        "peggedReference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "Amend the pegged order reference for the order\n- See [`PeggedReference`](#vega.PeggedReference)"
        }
      },
      "title": "An order amendment is a request to amend or update an existing order on Vega"
    },
    "v1OrderCancellation": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string",
          "title": "Unique identifier for the order (set by the system after consensus), required field"
        },
        "marketId": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        }
      },
      "title": "An order cancellation is a request to cancel an existing order on Vega"
    },
    "v1OrderSubmission": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "Market identifier for the order, required field"
        },
        "price": {
          "type": "string",
          "title": "Price for the order, the price is an integer, for example `123456` is a correctly\nformatted price of `1.23456` assuming market configured to 5 decimal places,\n, required field for limit orders, however it is not required for market orders"
        },
        "size": {
          "type": "string",
          "format": "uint64",
          "title": "Size for the order, for example, in a futures market the size equals the number of units, cannot be negative"
        },
        "side": {
          "$ref": "#/definitions/vegaSide",
          "title": "Side for the order, e.g. SIDE_BUY or SIDE_SELL, required field\n- See `Side`"
        },
        "timeInForce": {
          "$ref": "#/definitions/OrderTimeInForce",
          "title": "Time in force indicates how long an order will remain active before it is executed or expires, required field\n- See `Order.TimeInForce`"
        },
        "expiresAt": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp for when the order will expire, in nanoseconds since the epoch,\nrequired field only for `Order.TimeInForce`.TIME_IN_FORCE_GTT`\n- See `VegaTimeResponse`.`timestamp`"
        },
        "type": {
          "$ref": "#/definitions/vegaOrderType",
          "title": "Type for the order, required field - See `Order.Type`"
        },
        "reference": {
          "type": "string",
          "title": "Reference given for the order, this is typically used to retrieve an order submitted through consensus, currently\nset internally by the node to return a unique reference identifier for the order submission"
        },
        "peggedOrder": {
          "$ref": "#/definitions/vegaPeggedOrder",
          "title": "Used to specify the details for a pegged order\n- See `PeggedOrder`"
        }
      },
      "title": "An order submission is a request to submit or create a new order on Vega"
    },
    "v1PropertyKey": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name is the name of the property."
        },
        "type": {
          "$ref": "#/definitions/v1PropertyKeyType",
          "description": "type is the type of the property."
        }
      },
      "description": "PropertyKey describes the property key contained in an oracle data."
    },
    "v1PropertyKeyType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_EMPTY",
        "TYPE_INTEGER",
        "TYPE_STRING",
        "TYPE_BOOLEAN",
        "TYPE_DECIMAL",
        "TYPE_TIMESTAMP"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "Type describes the type of properties that are supported by the oracle\nengine.\n\n - TYPE_UNSPECIFIED: The default value.\n - TYPE_EMPTY: Any type.\n - TYPE_INTEGER: Integer type.\n - TYPE_STRING: String type.\n - TYPE_BOOLEAN: Boolean type.\n - TYPE_DECIMAL: Any floating point decimal type.\n - TYPE_TIMESTAMP: Timestamp date type."
    },
    "v1ProposalSubmission": {
      "type": "object",
      "properties": {
        "reference": {
          "type": "string",
          "title": "Proposal reference"
        },
        "terms": {
          "$ref": "#/definitions/vegaProposalTerms",
          "title": "Proposal configuration and the actual change that is meant to be executed when proposal is enacted"
        },
        "rationale": {
          "$ref": "#/definitions/vegaProposalRationale",
          "description": "The rationale behind a proposal."
        }
      },
      "title": "A command to submit a new proposal for the\nVega network governance"
    },
    "v1ProtocolUpgradeProposal": {
      "type": "object",
      "properties": {
        "upgradeBlockHeight": {
          "type": "string",
          "format": "uint64",
          "title": "The block height at which to perform the upgrade"
        },
        "vegaReleaseTag": {
          "type": "string",
          "title": "the release tag for the vega binary"
        }
      }
    },
    "v1RecurringTransfer": {
      "type": "object",
      "properties": {
        "startEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The first epoch from which this transfer shall be paid"
        },
        "endEpoch": {
          "type": "string",
          "format": "uint64",
          "title": "The last epoch at which this transfer shall be paid"
        },
        "factor": {
          "type": "string",
          "title": "factor needs to be \u003e 0"
        },
        "dispatchStrategy": {
          "$ref": "#/definitions/vegaDispatchStrategy",
          "title": "optional parameter defining how a transfer is dispatched"
        }
      },
      "title": "Specific details for a recurring transfer"
    },
    "v1Signature": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The bytes of the signature (hex-encoded)."
        },
        "algo": {
          "type": "string",
          "description": "The algorithm used to create the signature."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "The version of the signature used to create the signature."
        }
      },
      "description": "A signature to authenticate a transaction and to be verified by the Vega\nnetwork."
    },
    "v1StateVariableProposal": {
      "type": "object",
      "properties": {
        "proposal": {
          "$ref": "#/definitions/vegaStateValueProposal",
          "title": "The state value proposal details"
        }
      }
    },
    "v1UndelegateSubmission": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "title": "optional, if not specified = ALL"
        },
        "method": {
          "$ref": "#/definitions/UndelegateSubmissionMethod"
        }
      }
    },
    "v1ValidatorHeartbeat": {
      "type": "object",
      "properties": {
        "nodeId": {
          "type": "string",
          "title": "the id of the node emitting the heartbeat"
        },
        "ethereumSignature": {
          "$ref": "#/definitions/v1Signature",
          "title": "Signature from the validator made using the ethereum wallet"
        },
        "vegaSignature": {
          "$ref": "#/definitions/v1Signature",
          "title": "Signature from the validator made using the vega wallet"
        }
      },
      "title": "A message from a validator signaling they are still online and validating blocks\nor ready to validate block when they are till a potential validator"
    },
    "v1VoteSubmission": {
      "type": "object",
      "properties": {
        "proposalId": {
          "type": "string",
          "description": "The ID of the proposal to vote for."
        },
        "value": {
          "$ref": "#/definitions/VoteValue",
          "title": "The actual value of the vote"
        }
      },
      "description": "A command to submit a new vote for a governance\nproposal."
    },
    "v1WithdrawSubmission": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "title": "The amount to be withdrawn"
        },
        "asset": {
          "type": "string",
          "title": "The asset to be withdrawn"
        },
        "ext": {
          "$ref": "#/definitions/vegaWithdrawExt",
          "title": "Foreign chain specifics"
        }
      },
      "title": "Represents the submission request to withdraw funds for a party on Vega"
    },
    "vegaAccountType": {
      "type": "string",
      "enum": [
        "ACCOUNT_TYPE_UNSPECIFIED",
        "ACCOUNT_TYPE_INSURANCE",
        "ACCOUNT_TYPE_SETTLEMENT",
        "ACCOUNT_TYPE_MARGIN",
        "ACCOUNT_TYPE_GENERAL",
        "ACCOUNT_TYPE_FEES_INFRASTRUCTURE",
        "ACCOUNT_TYPE_FEES_LIQUIDITY",
        "ACCOUNT_TYPE_FEES_MAKER",
        "ACCOUNT_TYPE_BOND",
        "ACCOUNT_TYPE_EXTERNAL",
        "ACCOUNT_TYPE_GLOBAL_INSURANCE",
        "ACCOUNT_TYPE_GLOBAL_REWARD",
        "ACCOUNT_TYPE_PENDING_TRANSFERS",
        "ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES",
        "ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES",
        "ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES",
        "ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS"
      ],
      "default": "ACCOUNT_TYPE_UNSPECIFIED",
      "description": "- ACCOUNT_TYPE_UNSPECIFIED: Default value\n - ACCOUNT_TYPE_INSURANCE: Insurance pool accounts contain insurance pool funds for a market\n - ACCOUNT_TYPE_SETTLEMENT: Settlement accounts exist only during settlement or mark-to-market\n - ACCOUNT_TYPE_MARGIN: Margin accounts contain funds set aside for the margin needed to support a party's open positions.\nEach party will have a margin account for each market they have traded in.\nThe required initial margin is allocated to each market from your general account.\nCollateral in the margin account can't be withdrawn or used as margin on another market until\nit is released back to the general account.\nThe Vega protocol uses an internal accounting system to segregate funds held as\nmargin from other funds to ensure they are never lost or 'double spent'\n\nMargin account funds will vary as margin requirements on positions change\n - ACCOUNT_TYPE_GENERAL: General accounts contain the collateral for a party that is not otherwise allocated. A party will\nhave multiple general accounts, one for each asset they want\nto trade with\n\nGeneral accounts are where funds are initially deposited or withdrawn from,\nit is also the account where funds are taken to fulfil fees and initial margin requirements\n - ACCOUNT_TYPE_FEES_INFRASTRUCTURE: Infrastructure accounts contain fees earned by providing infrastructure on Vega\n - ACCOUNT_TYPE_FEES_LIQUIDITY: Liquidity accounts contain fees earned by providing liquidity on Vega markets\n - ACCOUNT_TYPE_FEES_MAKER: This account is created to hold fees earned by placing orders that sit on the book\nand are then matched with an incoming order to create a trade - These fees reward parties\nwho provide the best priced liquidity that actually allows trading to take place\n - ACCOUNT_TYPE_BOND: This account is created to maintain liquidity providers funds commitments\n - ACCOUNT_TYPE_EXTERNAL: External account represents an external source (deposit/withdrawal)\n - ACCOUNT_TYPE_GLOBAL_INSURANCE: Global insurance account for the asset\n - ACCOUNT_TYPE_GLOBAL_REWARD: Global reward account for the asset\n - ACCOUNT_TYPE_PENDING_TRANSFERS: Per asset account used to store pending transfers (if any)\n - ACCOUNT_TYPE_REWARD_MAKER_PAID_FEES: Per asset reward account for fees paid to makers\n - ACCOUNT_TYPE_REWARD_MAKER_RECEIVED_FEES: Per asset reward account for fees received by makers\n - ACCOUNT_TYPE_REWARD_LP_RECEIVED_FEES: Per asset reward account for fees received by liquidity providers\n - ACCOUNT_TYPE_REWARD_MARKET_PROPOSERS: Per asset reward account for market proposers when the market goes above some trading threshold",
      "title": "Various collateral/account types as used by Vega"
    },
    "vegaAssetDetails": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name of the asset (e.g: Great British Pound)"
        },
        "symbol": {
          "type": "string",
          "title": "Symbol of the asset (e.g: GBP)"
        },
        "decimals": {
          "type": "string",
          "format": "uint64",
          "title": "Number of decimal / precision handled by this asset"
        },
        "quantum": {
          "type": "string",
          "title": "The minimum economically meaningful amount in the asset"
        },
        "builtinAsset": {
          "$ref": "#/definitions/vegaBuiltinAsset",
          "title": "A built-in asset"
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20",
          "title": "An Ethereum ERC20 asset"
        }
      },
      "title": "The Vega representation of an external asset"
    },
    "vegaAssetDetailsUpdate": {
      "type": "object",
      "properties": {
        "quantum": {
          "type": "string",
          "title": "The minimum economically meaningful amount in the asset"
        },
        "erc20": {
          "$ref": "#/definitions/vegaERC20Update",
          "title": "An Ethereum ERC20 asset"
        }
      },
      "description": "The changes to apply on an existing asset."
    },
    "vegaBuiltinAsset": {
      "type": "object",
      "properties": {
        "maxFaucetAmountMint": {
          "type": "string",
          "title": "Maximum amount that can be requested by a party through the built-in asset faucet at a time"
        }
      },
      "title": "A Vega internal asset"
    },
    "vegaBuiltinAssetDeposit": {
      "type": "object",
      "properties": {
        "vegaAssetId": {
          "type": "string",
          "title": "A Vega network internal asset identifier"
        },
        "partyId": {
          "type": "string",
          "title": "A Vega party identifier (pub-key)"
        },
        "amount": {
          "type": "string",
          "title": "The amount to be deposited"
        }
      },
      "title": "A deposit for a Vega built-in asset"
    },
    "vegaBuiltinAssetEvent": {
      "type": "object",
      "properties": {
        "deposit": {
          "$ref": "#/definitions/vegaBuiltinAssetDeposit",
          "title": "Built-in asset deposit"
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaBuiltinAssetWithdrawal",
          "title": "Built-in asset withdrawal"
        }
      },
      "title": "An event related to a Vega built-in asset"
    },
    "vegaBuiltinAssetWithdrawal": {
      "type": "object",
      "properties": {
        "vegaAssetId": {
          "type": "string",
          "title": "A Vega network internal asset identifier"
        },
        "partyId": {
          "type": "string",
          "title": "A Vega network party identifier (pub-key)"
        },
        "amount": {
          "type": "string",
          "title": "The amount to be withdrawn"
        }
      },
      "title": "A withdrawal for a Vega built-in asset"
    },
    "vegaDispatchMetric": {
      "type": "string",
      "enum": [
        "DISPATCH_METRIC_UNSPECIFIED",
        "DISPATCH_METRIC_MAKER_FEES_PAID",
        "DISPATCH_METRIC_MAKER_FEES_RECEIVED",
        "DISPATCH_METRIC_LP_FEES_RECEIVED",
        "DISPATCH_METRIC_MARKET_VALUE"
      ],
      "default": "DISPATCH_METRIC_UNSPECIFIED",
      "title": "- DISPATCH_METRIC_MAKER_FEES_PAID: Dispatch metric that is using the total maker fees paid in the market\n - DISPATCH_METRIC_MAKER_FEES_RECEIVED: Dispatch metric that is using the total maker fees received in the market\n - DISPATCH_METRIC_LP_FEES_RECEIVED: Dispatch metric that is using the total LP fees received in the market\n - DISPATCH_METRIC_MARKET_VALUE: Dispatch metric that is using total value of the market if above the required threshold and not paid given proposer bonus yet"
    },
    "vegaDispatchStrategy": {
      "type": "object",
      "properties": {
        "assetForMetric": {
          "type": "string",
          "title": "The asset to use for metric"
        },
        "metric": {
          "$ref": "#/definitions/vegaDispatchMetric",
          "title": "The metric to apply"
        },
        "markets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional markets in scope"
        }
      }
    },
    "vegaERC20": {
      "type": "object",
      "properties": {
        "contractAddress": {
          "type": "string",
          "title": "The address of the contract for the token, on the ethereum network"
        },
        "lifetimeLimit": {
          "type": "string",
          "title": "The lifetime limits deposit per address\nnote: this is a temporary measure for restricted mainnet"
        },
        "withdrawThreshold": {
          "type": "string",
          "title": "The maximum allowed per withdraw\nnote: this is a temporary measure for restricted mainnet"
        }
      },
      "title": "An ERC20 token based asset, living on the ethereum network"
    },
    "vegaERC20AssetDelist": {
      "type": "object",
      "properties": {
        "vegaAssetId": {
          "type": "string",
          "title": "The Vega network internal identifier of the asset"
        }
      },
      "title": "An asset deny-listing for an ERC20 token"
    },
    "vegaERC20AssetLimitsUpdated": {
      "type": "object",
      "properties": {
        "vegaAssetId": {
          "type": "string",
          "title": "The Vega network internal identifier of the asset"
        },
        "sourceEthereumAddress": {
          "type": "string",
          "title": "The Ethereum wallet that initiated the deposit"
        },
        "lifetimeLimits": {
          "type": "string",
          "title": "The updated lifetime limits"
        },
        "withdrawThreshold": {
          "type": "string",
          "title": "The updated withdraw threshold"
        }
      }
    },
    "vegaERC20AssetList": {
      "type": "object",
      "properties": {
        "vegaAssetId": {
          "type": "string",
          "title": "The Vega network internal identifier of the asset"
        },
        "assetSource": {
          "type": "string",
          "title": "The ethereum address of the asset"
        }
      },
      "title": "An asset allow-listing for an ERC20 token"
    },
    "vegaERC20Deposit": {
      "type": "object",
      "properties": {
        "vegaAssetId": {
          "type": "string",
          "title": "The vega network internal identifier of the asset"
        },
        "sourceEthereumAddress": {
          "type": "string",
          "title": "The Ethereum wallet that initiated the deposit"
        },
        "targetPartyId": {
          "type": "string",
          "title": "The Vega party identifier (pub-key) which is the target of the deposit"
        },
        "amount": {
          "type": "string",
          "title": "The amount to be deposited"
        }
      },
      "title": "An asset deposit for an ERC20 token"
    },
    "vegaERC20Event": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "format": "uint64",
          "title": "Index of the log in the transaction"
        },
        "block": {
          "type": "string",
          "format": "uint64",
          "title": "The block in which the transaction was added"
        },
        "assetList": {
          "$ref": "#/definitions/vegaERC20AssetList",
          "title": "List an ERC20 asset"
        },
        "assetDelist": {
          "$ref": "#/definitions/vegaERC20AssetDelist",
          "title": "De-list an ERC20 asset"
        },
        "deposit": {
          "$ref": "#/definitions/vegaERC20Deposit",
          "title": "Deposit ERC20 asset"
        },
        "withdrawal": {
          "$ref": "#/definitions/vegaERC20Withdrawal",
          "title": "Withdraw ERC20 asset"
        },
        "assetLimitsUpdated": {
          "$ref": "#/definitions/vegaERC20AssetLimitsUpdated",
          "title": "Update an ERC20 asset"
        },
        "bridgeStopped": {
          "type": "boolean",
          "title": "Bridge operations has been stopped"
        },
        "bridgeResumed": {
          "type": "boolean",
          "title": "Bridge operations has been resumed"
        }
      },
      "title": "An event related to an ERC20 token"
    },
    "vegaERC20MultiSigEvent": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "format": "uint64",
          "title": "Index of the log in the transaction"
        },
        "block": {
          "type": "string",
          "format": "uint64",
          "title": "The block in which the transaction was added"
        },
        "signerAdded": {
          "$ref": "#/definitions/vegaERC20SignerAdded",
          "title": "Add a signer to the erc20 bridge"
        },
        "signerRemoved": {
          "$ref": "#/definitions/vegaERC20SignerRemoved",
          "title": "Remove a signer from the erc20 bridge"
        },
        "thresholdSet": {
          "$ref": "#/definitions/vegaERC20ThresholdSet",
          "title": "Threshold set"
        }
      },
      "title": "An event related to the ERC20 MultiSig"
    },
    "vegaERC20SignerAdded": {
      "type": "object",
      "properties": {
        "newSigner": {
          "type": "string",
          "title": "The ethereum address of the new signer"
        },
        "nonce": {
          "type": "string",
          "title": "The nonce create by the vega network used for this new signer"
        },
        "blockTime": {
          "type": "string",
          "format": "int64",
          "description": "The time at which the block was produced\nwill be used to inform the core at what time\nthe stake was made unavailable."
        }
      },
      "title": "A new signer added to the ERC20 bridge"
    },
    "vegaERC20SignerRemoved": {
      "type": "object",
      "properties": {
        "oldSigner": {
          "type": "string",
          "title": "The ethereum address of the old signer"
        },
        "nonce": {
          "type": "string",
          "title": "The nonce create by the vega network used for this old signer"
        },
        "blockTime": {
          "type": "string",
          "format": "int64",
          "description": "The time at which the block was produced\nwill be used to inform the core at what time\nthe stake was made unavailable."
        }
      },
      "title": "A signer removed from the ERC20 bridge"
    },
    "vegaERC20ThresholdSet": {
      "type": "object",
      "properties": {
        "newThreshold": {
          "type": "integer",
          "format": "int64",
          "title": "The new threshold"
        },
        "nonce": {
          "type": "string",
          "title": "The nonce create by the vega network"
        },
        "blockTime": {
          "type": "string",
          "format": "int64",
          "description": "The time at which the block was produced\nwill be used to inform the core at what time\nthe stake was made unavailable."
        }
      },
      "title": "The threshold have been updated on the multisigcontrol"
    },
    "vegaERC20Update": {
      "type": "object",
      "properties": {
        "lifetimeLimit": {
          "type": "string",
          "title": "The lifetime limits deposit per address.\nThis is will be interpreted against the asset decimals.\nnote: this is a temporary measure for restricted mainnet"
        },
        "withdrawThreshold": {
          "type": "string",
          "title": "The maximum allowed per withdraw.\nThis is will be interpreted against the asset decimals.\nnote: this is a temporary measure for restricted mainnet"
        }
      }
    },
    "vegaERC20Withdrawal": {
      "type": "object",
      "properties": {
        "vegaAssetId": {
          "type": "string",
          "title": "The Vega network internal identifier of the asset"
        },
        "targetEthereumAddress": {
          "type": "string",
          "title": "The target Ethereum wallet address"
        },
        "referenceNonce": {
          "type": "string",
          "title": "The reference nonce used for the transaction"
        }
      },
      "title": "An asset withdrawal for an ERC20 token"
    },
    "vegaErc20WithdrawExt": {
      "type": "object",
      "properties": {
        "receiverAddress": {
          "type": "string",
          "title": "The address into which the bridge will release the funds"
        }
      },
      "title": "An extension of data required for the withdraw submissions"
    },
    "vegaFutureProduct": {
      "type": "object",
      "properties": {
        "settlementAsset": {
          "type": "string",
          "title": "Asset ID for the product's settlement asset"
        },
        "quoteName": {
          "type": "string",
          "title": "Product quote name"
        },
        "oracleSpecForSettlementData": {
          "$ref": "#/definitions/v1OracleSpecConfiguration",
          "title": "The oracle spec describing the oracle data for settlement"
        },
        "oracleSpecForTradingTermination": {
          "$ref": "#/definitions/v1OracleSpecConfiguration",
          "title": "The oracle spec describing the oracle data of trading termination"
        },
        "oracleSpecBinding": {
          "$ref": "#/definitions/vegaOracleSpecToFutureBinding",
          "title": "The binding between the oracle spec and the settlement data"
        },
        "settlementDataDecimals": {
          "type": "integer",
          "format": "int64",
          "title": "The number of decimal places implied by the settlement data (such as price) emitted by the settlement oracle"
        }
      },
      "title": "Future product configuration"
    },
    "vegaInstrumentConfiguration": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Instrument name"
        },
        "code": {
          "type": "string",
          "title": "Instrument code, human-readable shortcode used to describe the instrument"
        },
        "future": {
          "$ref": "#/definitions/vegaFutureProduct",
          "title": "Future"
        }
      },
      "title": "Instrument configuration"
    },
    "vegaKeyValueBundle": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "tolerance": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/vegaStateVarValue"
        }
      }
    },
    "vegaLiquidityMonitoringParameters": {
      "type": "object",
      "properties": {
        "targetStakeParameters": {
          "$ref": "#/definitions/vegaTargetStakeParameters",
          "title": "Specifies parameters related to target stake calculation"
        },
        "triggeringRatio": {
          "type": "number",
          "format": "double",
          "title": "Specifies the triggering ratio for entering liquidity auction"
        },
        "auctionExtension": {
          "type": "string",
          "format": "int64",
          "title": "Specifies by how many seconds an auction should be extended if leaving the auction were to trigger a liquidity auction"
        }
      },
      "title": "LiquidityMonitoringParameters contains settings used for liquidity monitoring"
    },
    "vegaLiquidityOrder": {
      "type": "object",
      "properties": {
        "reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "The pegged reference point for the order"
        },
        "proportion": {
          "type": "integer",
          "format": "int64",
          "title": "The relative proportion of the commitment to be allocated at a price level"
        },
        "offset": {
          "type": "string",
          "title": "The offset/amount of units away for the order"
        }
      },
      "title": "Represents a liquidity order"
    },
    "vegaLogNormalModelParams": {
      "type": "object",
      "properties": {
        "mu": {
          "type": "number",
          "format": "double",
          "title": "Mu param"
        },
        "r": {
          "type": "number",
          "format": "double",
          "title": "R param"
        },
        "sigma": {
          "type": "number",
          "format": "double",
          "title": "Sigma param"
        }
      },
      "title": "Risk model parameters for log normal"
    },
    "vegaLogNormalRiskModel": {
      "type": "object",
      "properties": {
        "riskAversionParameter": {
          "type": "number",
          "format": "double",
          "title": "Risk Aversion Parameter"
        },
        "tau": {
          "type": "number",
          "format": "double",
          "title": "Tau"
        },
        "params": {
          "$ref": "#/definitions/vegaLogNormalModelParams",
          "title": "Risk model parameters for log normal"
        }
      },
      "title": "Risk model for log normal"
    },
    "vegaMatrixValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaVectorValue"
          }
        }
      }
    },
    "vegaNetworkParameter": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "The unique key"
        },
        "value": {
          "type": "string",
          "title": "The value for the network parameter"
        }
      },
      "title": "Represents a network parameter on Vega"
    },
    "vegaNewAsset": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaAssetDetails",
          "title": "The configuration of the new asset"
        }
      },
      "title": "New asset on Vega"
    },
    "vegaNewFreeform": {
      "type": "object",
      "description": "Freeform proposal\nThis message is just used as a placeholder to sort out the nature of the\nproposal once parsed."
    },
    "vegaNewMarket": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNewMarketConfiguration",
          "title": "The configuration of the new market"
        }
      },
      "title": "New market on Vega"
    },
    "vegaNewMarketConfiguration": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaInstrumentConfiguration",
          "title": "New market instrument configuration"
        },
        "decimalPlaces": {
          "type": "string",
          "format": "uint64",
          "title": "Decimal places used for the new market, sets the smallest price increment on the book"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional new market meta data, tags"
        },
        "priceMonitoringParameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "Price monitoring parameters"
        },
        "liquidityMonitoringParameters": {
          "$ref": "#/definitions/vegaLiquidityMonitoringParameters",
          "title": "Liquidity monitoring parameters"
        },
        "simple": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected"
        },
        "logNormal": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected"
        },
        "positionDecimalPlaces": {
          "type": "string",
          "format": "uint64",
          "title": "Decimal places for order sizes, sets what size the smallest order / position on the market can be"
        }
      },
      "title": "Configuration for a new market on Vega"
    },
    "vegaOracleSpecToFutureBinding": {
      "type": "object",
      "properties": {
        "settlementDataProperty": {
          "type": "string",
          "description": "settlement_data_property holds the name of the property in the oracle data\nthat should be used as settlement data.\nIf it is set to \"prices.BTC.value\", then the Future will use the value of\nthis property as settlement data."
        },
        "tradingTerminationProperty": {
          "type": "string",
          "title": "the name of the property in the oracle data that signals termination of trading"
        }
      },
      "title": "OracleSpecToFutureBinding tells on which property oracle data should be\nused as settlement data and which to use the trading terminated trigger"
    },
    "vegaOrderType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_LIMIT",
        "TYPE_MARKET",
        "TYPE_NETWORK"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "- TYPE_UNSPECIFIED: Default value, always invalid\n - TYPE_LIMIT: Used for Limit orders\n - TYPE_MARKET: Used for Market orders\n - TYPE_NETWORK: Used for orders where the initiating party is the network (with distressed parties)",
      "title": "Type values for an order"
    },
    "vegaPeggedOrder": {
      "type": "object",
      "properties": {
        "reference": {
          "$ref": "#/definitions/vegaPeggedReference",
          "title": "The price point the order is linked to"
        },
        "offset": {
          "type": "string",
          "title": "Offset from the price reference"
        }
      },
      "title": "Pegged orders are limit orders where the price is specified in the form REFERENCE +/- OFFSET\nThey can be used for any limit order that is valid during continuous trading"
    },
    "vegaPeggedReference": {
      "type": "string",
      "enum": [
        "PEGGED_REFERENCE_UNSPECIFIED",
        "PEGGED_REFERENCE_MID",
        "PEGGED_REFERENCE_BEST_BID",
        "PEGGED_REFERENCE_BEST_ASK"
      ],
      "default": "PEGGED_REFERENCE_UNSPECIFIED",
      "description": "- PEGGED_REFERENCE_UNSPECIFIED: Default value for PeggedReference, no reference given\n - PEGGED_REFERENCE_MID: Mid price reference\n - PEGGED_REFERENCE_BEST_BID: Best bid price reference\n - PEGGED_REFERENCE_BEST_ASK: Best ask price reference",
      "title": "A pegged reference defines which price point a pegged order is linked to - meaning\nthe price for a pegged order is calculated from the value of the reference price point"
    },
    "vegaPriceMonitoringParameters": {
      "type": "object",
      "properties": {
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaPriceMonitoringTrigger"
          }
        }
      },
      "title": "PriceMonitoringParameters contains a collection of triggers to be used for a given market"
    },
    "vegaPriceMonitoringTrigger": {
      "type": "object",
      "properties": {
        "horizon": {
          "type": "string",
          "format": "int64",
          "title": "Price monitoring projection horizon τ in seconds"
        },
        "probability": {
          "type": "string",
          "title": "Price monitoring probability level p"
        },
        "auctionExtension": {
          "type": "string",
          "format": "int64",
          "title": "Price monitoring auction extension duration in seconds should the price\nbreach it's theoretical level over the specified horizon at the specified\nprobability level"
        }
      },
      "title": "PriceMonitoringTrigger holds together price projection horizon τ, probability level p, and auction extension duration"
    },
    "vegaProposalRationale": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description to show a short title / something in case the link goes offline.\nThis is to be between 0 and 20k unicode characters.\nThis is mandatory for all proposals."
        },
        "title": {
          "type": "string",
          "description": "Title to be used to give a short description of the proposal in lists.\nThis is to be between 0 and 100 unicode characters.\nThis is mandatory for all proposals."
        }
      },
      "description": "The rationale behind a proposal."
    },
    "vegaProposalTerms": {
      "type": "object",
      "properties": {
        "closingTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp (Unix time in seconds) when voting closes for this proposal,\nconstrained by `minClose` and `maxClose` network parameters"
        },
        "enactmentTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Timestamp (Unix time in seconds) when proposal gets enacted (if passed),\nconstrained by `minEnact` and `maxEnact` network parameters"
        },
        "validationTimestamp": {
          "type": "string",
          "format": "int64",
          "title": "Validation timestamp (Unix time in seconds)"
        },
        "updateMarket": {
          "$ref": "#/definitions/vegaUpdateMarket",
          "title": "Proposal change for modifying an existing market on Vega"
        },
        "newMarket": {
          "$ref": "#/definitions/vegaNewMarket",
          "title": "Proposal change for creating new market on Vega"
        },
        "updateNetworkParameter": {
          "$ref": "#/definitions/vegaUpdateNetworkParameter",
          "title": "Proposal change for updating Vega network parameters"
        },
        "newAsset": {
          "$ref": "#/definitions/vegaNewAsset",
          "title": "Proposal change for creating new assets on Vega"
        },
        "newFreeform": {
          "$ref": "#/definitions/vegaNewFreeform",
          "title": "Proposal change for a freeform request, which can be voted on but does not change the behaviour of the system,\nand can be used to gauge community sentiment"
        },
        "updateAsset": {
          "$ref": "#/definitions/vegaUpdateAsset",
          "title": "Proposal change for updating an asset"
        }
      },
      "title": "Terms for a governance proposal on Vega"
    },
    "vegaScalarValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "vegaSide": {
      "type": "string",
      "enum": [
        "SIDE_UNSPECIFIED",
        "SIDE_BUY",
        "SIDE_SELL"
      ],
      "default": "SIDE_UNSPECIFIED",
      "description": "- SIDE_UNSPECIFIED: Default value, always invalid\n - SIDE_BUY: Buy order\n - SIDE_SELL: Sell order",
      "title": "A side relates to the direction of an order, to Buy, or Sell"
    },
    "vegaSimpleModelParams": {
      "type": "object",
      "properties": {
        "factorLong": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined risk factor value for long"
        },
        "factorShort": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined risk factor value for short"
        },
        "maxMoveUp": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined maximum price move up that the model considers as valid"
        },
        "minMoveDown": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined minimum price move down that the model considers as valid"
        },
        "probabilityOfTrading": {
          "type": "number",
          "format": "double",
          "title": "Pre-defined constant probability of trading"
        }
      },
      "title": "Risk model parameters for simple modelling"
    },
    "vegaStakeDeposited": {
      "type": "object",
      "properties": {
        "ethereumAddress": {
          "type": "string",
          "title": "Ethereum Address of the user depositing stake (hex encode with 0x prefix)"
        },
        "vegaPublicKey": {
          "type": "string",
          "title": "The public of the party receiving the stake deposit (hex encode)"
        },
        "amount": {
          "type": "string",
          "title": "The amount deposited (base 10)"
        },
        "blockTime": {
          "type": "string",
          "format": "int64",
          "description": "The time at which the block was produced\nwill be used to inform the core at what time\nthe stake started to be available."
        }
      }
    },
    "vegaStakeRemoved": {
      "type": "object",
      "properties": {
        "ethereumAddress": {
          "type": "string",
          "title": "Ethereum address of the user removing stake (hex encode with 0x prefix)"
        },
        "vegaPublicKey": {
          "type": "string",
          "title": "The public key of the party from which to remove stake (hex encode)"
        },
        "amount": {
          "type": "string",
          "title": "The amount removed (base 10)"
        },
        "blockTime": {
          "type": "string",
          "format": "int64",
          "description": "The time at which the block was produced\nwill be used to inform the core at what time\nthe stake was made unavailable."
        }
      }
    },
    "vegaStakeTotalSupply": {
      "type": "object",
      "properties": {
        "tokenAddress": {
          "type": "string",
          "title": "The address of the staking asset"
        },
        "totalSupply": {
          "type": "string",
          "title": "The total supply observed for the token"
        }
      }
    },
    "vegaStakingEvent": {
      "type": "object",
      "properties": {
        "index": {
          "type": "string",
          "format": "uint64",
          "title": "Index of the log in the transaction"
        },
        "block": {
          "type": "string",
          "format": "uint64",
          "title": "The block in which the transaction was added"
        },
        "stakeDeposited": {
          "$ref": "#/definitions/vegaStakeDeposited"
        },
        "stakeRemoved": {
          "$ref": "#/definitions/vegaStakeRemoved"
        },
        "totalSupply": {
          "$ref": "#/definitions/vegaStakeTotalSupply"
        }
      }
    },
    "vegaStateValueProposal": {
      "type": "object",
      "properties": {
        "stateVarId": {
          "type": "string",
          "title": "state variable identifier"
        },
        "eventId": {
          "type": "string",
          "title": "event identifier"
        },
        "kvb": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vegaKeyValueBundle"
          },
          "title": "key value tolerance triplets"
        }
      }
    },
    "vegaStateVarValue": {
      "type": "object",
      "properties": {
        "scalarVal": {
          "$ref": "#/definitions/vegaScalarValue"
        },
        "vectorVal": {
          "$ref": "#/definitions/vegaVectorValue"
        },
        "matrixVal": {
          "$ref": "#/definitions/vegaMatrixValue"
        }
      }
    },
    "vegaTargetStakeParameters": {
      "type": "object",
      "properties": {
        "timeWindow": {
          "type": "string",
          "format": "int64",
          "title": "Specifies length of time window expressed in seconds for target stake calculation"
        },
        "scalingFactor": {
          "type": "number",
          "format": "double",
          "title": "Specifies scaling factors used in target stake calculation"
        }
      },
      "title": "TargetStakeParameters contains parameters used in target stake calculation"
    },
    "vegaUpdateAsset": {
      "type": "object",
      "properties": {
        "assetId": {
          "type": "string",
          "title": "The ID of the asset to be updated"
        },
        "changes": {
          "$ref": "#/definitions/vegaAssetDetailsUpdate",
          "title": "The changes to apply on an existing asset"
        }
      },
      "title": "Update an existing asset on Vega"
    },
    "vegaUpdateFutureProduct": {
      "type": "object",
      "properties": {
        "quoteName": {
          "type": "string",
          "title": "Human-readable name/abbreviation of the quote name"
        },
        "oracleSpecForSettlementData": {
          "$ref": "#/definitions/v1OracleSpecConfiguration",
          "title": "The oracle spec describing the oracle data of settlement data"
        },
        "oracleSpecForTradingTermination": {
          "$ref": "#/definitions/v1OracleSpecConfiguration",
          "title": "The oracle spec describing the oracle data of trading termination"
        },
        "oracleSpecBinding": {
          "$ref": "#/definitions/vegaOracleSpecToFutureBinding",
          "title": "The binding between the oracle spec and the settlement data"
        },
        "settlementDataDecimals": {
          "type": "integer",
          "format": "int64",
          "title": "The number of decimal places implied by the settlement data (such as price) emitted by the settlement oracle"
        }
      },
      "title": "Future product configuration"
    },
    "vegaUpdateInstrumentConfiguration": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "title": "Instrument code, human-readable shortcode used to describe the instrument"
        },
        "future": {
          "$ref": "#/definitions/vegaUpdateFutureProduct",
          "title": "Future"
        }
      },
      "title": "Instrument configuration"
    },
    "vegaUpdateMarket": {
      "type": "object",
      "properties": {
        "marketId": {
          "type": "string",
          "title": "The identifier of the market to update"
        },
        "changes": {
          "$ref": "#/definitions/vegaUpdateMarketConfiguration",
          "title": "The updated configuration of the market"
        }
      },
      "title": "Update an existing market on Vega"
    },
    "vegaUpdateMarketConfiguration": {
      "type": "object",
      "properties": {
        "instrument": {
          "$ref": "#/definitions/vegaUpdateInstrumentConfiguration",
          "title": "Updated market instrument configuration"
        },
        "metadata": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional market metadata, tags"
        },
        "priceMonitoringParameters": {
          "$ref": "#/definitions/vegaPriceMonitoringParameters",
          "title": "Price monitoring parameters"
        },
        "liquidityMonitoringParameters": {
          "$ref": "#/definitions/vegaLiquidityMonitoringParameters",
          "title": "Liquidity monitoring parameters"
        },
        "simple": {
          "$ref": "#/definitions/vegaSimpleModelParams",
          "title": "Simple risk model parameters, valid only if MODEL_SIMPLE is selected"
        },
        "logNormal": {
          "$ref": "#/definitions/vegaLogNormalRiskModel",
          "title": "Log normal risk model parameters, valid only if MODEL_LOG_NORMAL is selected"
        }
      },
      "title": "Configuration to update a market on Vega"
    },
    "vegaUpdateNetworkParameter": {
      "type": "object",
      "properties": {
        "changes": {
          "$ref": "#/definitions/vegaNetworkParameter",
          "title": "The network parameter to update"
        }
      },
      "title": "Update network configuration on Vega"
    },
    "vegaVectorValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "vegaWithdrawExt": {
      "type": "object",
      "properties": {
        "erc20": {
          "$ref": "#/definitions/vegaErc20WithdrawExt",
          "title": "ERC20 withdrawal details"
        }
      },
      "title": "Withdrawal external details"
    }
  }
}
